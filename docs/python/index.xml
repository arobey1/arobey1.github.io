<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Pythons on Alex Robey</title>
        <link>https://arobey1.github.io/python/</link>
        <description>Recent content in Pythons on Alex Robey</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 27 Dec 2022 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://arobey1.github.io/python/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Conditionals</title>
            <link>https://arobey1.github.io/python/conditionals/</link>
            <pubDate>Tue, 27 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://arobey1.github.io/python/conditionals/</guid>
            <description>Today is a big day! We&amp;rsquo;re going to meet one of the most essential parts of the Python language: conditionals. After you&amp;rsquo;ve mastered conditionals, you&amp;rsquo;ll be amazed at how much more you can do in Python. Let&amp;rsquo;s get to work!
 What is programming and why do we do it? These are big questions. There are many reasons why we write programs. Perhaps you&amp;rsquo;re a data scientist who wants to use sales data to decide whether or not to sell a particular product.</description>
            <content type="html"><![CDATA[<p>Today is a big day!  We&rsquo;re going to meet one of the most essential parts of the Python language: conditionals.  After you&rsquo;ve mastered conditionals, you&rsquo;ll be amazed at how much more you can do in Python.  Let&rsquo;s get to work!</p>
<hr>
<h3 id="what-is-programming-and-why-do-we-do-it">What is programming and why do we do it?</h3>
<p>These are big questions.  There are many reasons why we write programs.  Perhaps you&rsquo;re a data scientist who wants to use sales data to decide whether or not to sell a particular product.  Or maybe you&rsquo;re a teacher who wants to write a program that automatically grades homework assignments.  Or perhaps you just bought an old, remote cabin out in the woods with a big lawn and a library full of books, and you want to write a program that will dim the lights so that you can enjoy a quiet dinner with your partner.</p>
<p>Common to almost all of these reasons is a common mantra:</p>
<blockquote>
<p>Programs are sets of instructions which automate some aspect of decision-making.</p>
</blockquote>
<p>As of yet, we have talked about many of the essential parts of the Python language such as <a href="https://arobey1.github.io/python/interacting_with_python/#print-statements" title="Print statements">printing</a>, <a href="https://arobey1.github.io/python/interacting_with_python/#user-supplied-input" title="User-supplied input">user-supplied input</a>, <a href="https://arobey1.github.io/python/variables_data_types/" title="Variables">variables</a>, <a href="https://arobey1.github.io/python/math_operations/" title="Math Operations">mathematical operations</a>, and <a href="https://arobey1.github.io/python/lists/" title="Lists">lists</a>.  But we haven&rsquo;t talked at all about how to perform basic decision-making in Python.  So let&rsquo;s get right to it!</p>
<hr>
<h3 id="what-are-conditionals">What are conditionals?</h3>
<p>When it comes to decision-making in Python, nothing is as important as the concept of <strong>conditionals</strong>.</p>
<blockquote>
<p>Conditional statements perform one (or multiple) action(s) based on whether a particular Boolean expression is True or False.</p>
</blockquote>
<p>To illustrate this idea, let&rsquo;s step back in time to the mid-1800s.  Specifically, we&rsquo;re going to take a look at an argument in the English philosopher John Stuart Mill&rsquo;s 1843 treatise &ldquo;A System of Logic: Ratiocinative and Inductive.&rdquo;  In this treatise, Mill uses this example to illustrate a basic logical argument:</p>
<pre><code>All men are mortal.
Socrates is a man.
Therefore, Socrates is mortal.
</code></pre><p>This might not be immediately clear, but these three lines constitutes our first example of a conditional.  To see this, let&rsquo;s write the second two lines of the argument in another way:</p>
<pre><code>if &lt;input&gt; is a man:
    then &lt;input&gt; is mortal.
</code></pre><p>In the first line, we test to see whether <code>&lt;input&gt;</code> is a man; this is the Boolean condition mentioned in the definition of conditional statements.  If this Boolean statement is True, we conclude that <code>&lt;input&gt;</code> is mortal, which is the action performed by the conditional statement.  Thus, as Socrates is a man, this pseudocode will determine that Socrates is in fact mortal when we pass Socrates as <code>&lt;input&gt;</code>.</p>
<hr>
<h3 id="conditionals-in-python-a-first-example">Conditionals in Python: A first example</h3>
<p>Let&rsquo;s make this a little bit more concrete.  Say that you want to buy a dog.  But not just any dog.  You don&rsquo;t like small dogs, because. . . well, do I really need to explain?  And now that you&rsquo;re a programmer, you decide that it&rsquo;s a great idea to write a script that will tell you whether or not you should buy a dog.  Here&rsquo;s a program &ndash; let&rsquo;s call it buy_a_dog.py &ndash; that you might write to accomplish this task:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Should you buy the dog?&#39;</span>)
dog_weight <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;How much does the candidate dog weigh (in lbs)? &#39;</span>))

<span style="color:#66d9ef">if</span> dog_weight <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">40</span>:
    print(<span style="color:#e6db74">&#39;Yes!&#39;</span>)
<span style="color:#66d9ef">else</span>:
    print(<span style="color:#e6db74">&#39;No.&#39;</span>)
</code></pre></div><p>This program will print &lsquo;Yes!&rsquo; if the weight you input is larger than 40 lbs; otherwise it will print &lsquo;No!&rsquo;.  Here&rsquo;s some sample output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python buy_a_dog.py
Should you buy the dog?
How much does the candidate dog weigh <span style="color:#f92672">(</span>in lbs<span style="color:#f92672">)</span>? <span style="color:#ae81ff">25</span>
No.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python buy_a_dog.py
Should you buy the dog?
How much does the candidate dog weigh <span style="color:#f92672">(</span>in lbs<span style="color:#f92672">)</span>? <span style="color:#ae81ff">100</span>
Yes!
</code></pre></div><p>This is an important point of divergence from what we&rsquo;ve seen this far in this Python course.  Specifically, this is the first time we&rsquo;ve seen a program that can make a decision that depends on user-supplied input.  The example shown above will be the first of many times we see decision-making implemented in code.</p>
<hr>
<h3 id="exercise-1-a-first-look-at-conditionals">Exercise 1 (A first look at conditionals)</h3>
<p>You&rsquo;ve just seen your first conditional!  In this exercise, I&rsquo;m going to ask you to implement your own conditional.  Here&rsquo;s the game plan.</p>
<p>Let&rsquo;s say that you&rsquo;re planning on going on a quiet, evening-time walk along the river with your significant other.  However, if the temperature is less than a given threshold, you&rsquo;ll stay inside and watch a movie instead.  Your job is to write a program that will tell you whether or not you should go for a walk.  Here&rsquo;s some sample output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python go_for_a_walk.py
Question: Should you go <span style="color:#66d9ef">for</span> a walk with your partner?

Enter the current temperature <span style="color:#f92672">(</span>in degrees Fahrenheit<span style="color:#f92672">)</span>: <span style="color:#ae81ff">72</span>
What is your temperature threshold <span style="color:#f92672">(</span>in degrees Fahrenheit<span style="color:#f92672">)</span>: <span style="color:#ae81ff">10</span>

Answer: Absolutely, yes!
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python go_for_a_walk.py
Question: Should you go <span style="color:#66d9ef">for</span> a walk with your partner?

Enter the current temperature <span style="color:#f92672">(</span>in degrees Fahrenheit<span style="color:#f92672">)</span>: <span style="color:#ae81ff">2</span>
What is your temperature threshold <span style="color:#f92672">(</span>in degrees Fahrenheit<span style="color:#f92672">)</span>: <span style="color:#ae81ff">10</span>

Answer: Nah, stay inside and watch that movie!
</code></pre></div><p>You&rsquo;ve got this!  And as always, if you&rsquo;re more of a Celsius person, feel free to edit your program to reflect this.  I certainly won&rsquo;t hold it against you.</p>
<hr>
<h3 id="writing-conditionals-in-python-the-if-elif-else-paradigm">Writing conditionals in Python: The <code>if-elif-else</code> paradigm</h3>
<p>Let&rsquo;s take the opportunity to step back and look at the general syntax for writing conditionals in Python.  This syntax &ndash; you know what, let&rsquo;s call it a paradigm &ndash; goes by many names, but in these notes, I&rsquo;m going to refer to it as the <code>if-elif-else</code> paradigm.</p>
<p>When it comes to conditionals, there are three new keywords that we need to talk about.  Having told you that we&rsquo;ll be learning about the <code>if-elif-else</code> paradigm, it should come as no surprise that these three words are <code>if</code>, <code>elif</code>, and <code>else</code>.</p>
<p>You saw <code>if</code> and <code>else</code> in the previous section; these two keywords allow you to take different actions based on a single Boolean condition.  Our new friend in this section is <code>elif</code>, which is short for &ldquo;else if.&rdquo; <code>elif</code> allows us to add additional Boolean hypotheses to our conditional.  Here&rsquo;s an example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">my_number <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;Enter a number between 1 and 4: &#39;</span>))

<span style="color:#66d9ef">if</span> my_number <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>:
    print(<span style="color:#e6db74">&#34;You entered the first (and second) Fibonacci number!&#34;</span>)
<span style="color:#66d9ef">elif</span> my_number <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>:
    print(<span style="color:#e6db74">&#34;You entered the smallest prime number!&#34;</span>)
<span style="color:#66d9ef">elif</span> my_number <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>:
    print(<span style="color:#e6db74">&#34;According to Pythagoras, you entered the &#39;noblest&#39; of digits!&#34;</span>)
<span style="color:#66d9ef">elif</span> my_number <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>:
    print(<span style="color:#e6db74">&#34;You entered the only number that is spelled with the same number of characters as the number itself!&#34;</span>)
<span style="color:#66d9ef">else</span>:
    print(<span style="color:#e6db74">&#34;Make sure you entere a number between 1 and 4!&#34;</span>)
</code></pre></div><p>The general syntax of the <code>if-elif-else</code> paradigm allows you to include as many Boolean conditions as you want:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">if</span> <span style="color:#f92672">&lt;</span>Boolean expression<span style="color:#f92672">&gt;</span>:
    <span style="color:#f92672">&lt;</span>statement(s)<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">&lt;</span>a second Boolean expression<span style="color:#f92672">&gt;</span>:
    <span style="color:#f92672">&lt;</span>statement(s)<span style="color:#f92672">&gt;</span>
<span style="color:#66d9ef">elif</span> <span style="color:#f92672">&lt;</span>a third Boolean expression<span style="color:#f92672">&gt;</span>:
    <span style="color:#f92672">&lt;</span>statement(s)<span style="color:#f92672">&gt;</span>
<span style="color:#f92672">...</span>
<span style="color:#66d9ef">else</span>:
    <span style="color:#f92672">&lt;</span>statement(s)<span style="color:#f92672">&gt;</span>
</code></pre></div><p>In the script we wrote above, you get a different output depending on whether you enter 1, 2, 3, 4.  As a bonus, in the <code>else</code> clause, we print out a message that tells the user that the entered an invalid input.  This is often the way <code>else</code> is used &ndash; as a catchall for cases not specifically defined by your <code>if</code> and <code>elif</code> statements.</p>
<hr>
<h3 id="exercise-2-multiple-conditions">Exercise 2 (Multiple conditions)</h3>
<p>Let&rsquo;s revisit the <a href="#conditionals-in-python">earlier section</a> in which we made our dog-purchasing decision based on the weight of a candidate dog.  The setup is going to be exactly the same as before, with one small catch: You also don&rsquo;t want your dog to be too large, because you have but a small apartment and you don&rsquo;t want your future dog to feel cooped up.  And so you only want to buy a dog if it&rsquo;s heavier than 40 lbs but lighter than 90 lbs.  Your job is to write a script using the <code>if-elif-else</code> paradigm to determine whether or not you should buy a given dog.  Here&rsquo;s some sample output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python buy_a_dog.py
Should you buy the dog?
How much does the candidate dog weigh <span style="color:#f92672">(</span>in lbs<span style="color:#f92672">)</span>? <span style="color:#ae81ff">25</span>
No, the dog is too light.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python buy_a_dog.py
Should you buy the dog?
How much does the candidate dog weigh <span style="color:#f92672">(</span>in lbs<span style="color:#f92672">)</span>? <span style="color:#ae81ff">100</span>
No, the dog is too heavy.
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python buy_a_dog.py
Should you buy the dog?
How much does the candidate dog weigh <span style="color:#f92672">(</span>in lbs<span style="color:#f92672">)</span>? <span style="color:#ae81ff">63</span>
Yes, the dog is just right!
</code></pre></div><hr>
<h3 id="conditionals-of-all-shapes-and-sizes">Conditionals of all shapes and sizes</h3>
<p>As you might imagine, conditionals can get considerably more complicated within the <code>if-elif-else</code> paradigm.  To illustrate one such situation, let&rsquo;s return once more to our dog-buying example.  Your script &ndash; buy_a_dog.py &ndash; in the <a href="#exercise-2-multiple-conditions">previous exercise</a> should have looked something like this.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Should you buy the dog?&#39;</span>)
weight <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;How much does the candidate dog weight (in lbs)? &#39;</span>))

<span style="color:#66d9ef">if</span> weight <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">40</span>:
    print(<span style="color:#e6db74">&#39;No, the dog is too light.&#39;</span>)
<span style="color:#66d9ef">elif</span> weight <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">90</span>:
    print(<span style="color:#e6db74">&#39;No, the dog is too heavy.&#39;</span>)
<span style="color:#66d9ef">else</span>:
    print(<span style="color:#e6db74">&#39;Yes, the dog is just right!&#39;</span>)
</code></pre></div><p>Let&rsquo;s say that we want to simplify this script by supplying a simple &ldquo;yes&rdquo; or &ldquo;no&rdquo; answer.  So if the candidate dog is heavier than 90lbs or lighter than 40lbs, we will simply print &ldquo;No.&rdquo;, and otherwise, we will print &ldquo;Yes!&rdquo;.  The updated script would look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Should you buy the dog?&#39;</span>)
weight <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;How much does the candidate dog weight (in lbs)? &#39;</span>))

<span style="color:#66d9ef">if</span> weight <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">40</span>:
    print(<span style="color:#e6db74">&#39;No.&#39;</span>)
<span style="color:#66d9ef">elif</span> weight <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">90</span>:
    print(<span style="color:#e6db74">&#39;No.&#39;</span>)
<span style="color:#66d9ef">else</span>:
    print(<span style="color:#e6db74">&#39;Yes!&#39;</span>)
</code></pre></div><p>This will certainly work, but we should ask ourselves: Is this the most concise and readible way of writing this program?  There is a redundancy between the <code>if</code> and <code>elif</code> statement that isn&rsquo;t particularly pleasing.  That is, we have two logical cases that will cause the program will print &ldquo;No.&rdquo;  If we had many more cases to consider, this redundancy may become confusing to those who will be reading our code in the future.</p>
<p>How should we think about removing this redundancy?  Well, since the <code>if</code> and <code>elif</code> clauses will yield the same output, it would be awfully nice if we could somehow <em>combine</em> them into a single clause.  And luckily, Python has just the tool for the job: the <code>or</code> keyword.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Should you buy the dog?&#39;</span>)
weight <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;How much does the candidate dog weight (in lbs)? &#39;</span>))

<span style="color:#66d9ef">if</span> weight <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">40</span> <span style="color:#f92672">or</span> weight <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">90</span>:
    print(<span style="color:#e6db74">&#39;No.&#39;</span>)
<span style="color:#66d9ef">else</span>:
    print(<span style="color:#e6db74">&#39;Yes!&#39;</span>)
</code></pre></div><p>The neat thing here is that we have used Python&rsquo;s <code>or</code> keyword to combine the two cases that lead to the same output.  This program will print &ldquo;No.&rdquo; if the weight is less than 40 lbs <em>or</em> if the weight is greater than 90 lbs.  I hope you agree that this is a much clearer way of writing the program than our first version.</p>
<hr>
<h3 id="exercise-3-the-and-keyword">Exercise 3 (The <code>and</code> keyword)</h3>
<p>You just met the <code>or</code> keyword, which is essential for chaining together logical expressions.  Now it&rsquo;s time to meet <code>or</code>&rsquo;s best friend: the <code>and</code> keyword.  <code>and</code> can be used in exactly the same way as <code>or</code>, except that you will enter the conditional if both of the Boolean conditions are True, rather than only one or the other needing to be True when using <code>or</code>.</p>
<p>Let&rsquo;s try it out!  Rewrite the version of buy_a_dog.py that we wrote at the end of the previous section using the <code>and</code> keyword instead of the <code>or</code> keyword.  Note that it isn&rsquo;t just a one-for-one swap; replacing <code>or</code> with <code>and</code> will result in a program that will never print &ldquo;No.&rdquo;, because it&rsquo;s impossible for a number to be both less than 40 <em>and</em> greater than 90.  Give it a shot!</p>
<hr>
<h3 id="nesting-conditionals">Nesting conditionals</h3>
<p>We started this lesson by talking about decision-making and the <code>if-elif-else</code> paradigm.  This paradigm is powerful and flexible, letting us make all kinds of decisions.  To give you an idea of how this paradigm can be used to make more interesting decisions, consider the following scenario.</p>
<p>You&rsquo;re a zookeeper.  And it&rsquo;s your first day on the job.  And as part of your job, you need to be able to tell the animals in the zoo apart.  Not having had much experience with zoos, you aren&rsquo;t sure how to tell apart some of the animals.  Luckily, you recently mastered the Python programming language, and you have the bright idea to write a script that will help you tell the animals apart.  In particular, you need to be able to tell apart four different animals: giraffes, tigers, monkeys, and elephants.</p>
<p>An informative poster inside the zoo office gives you a set of simple rules for determining how to tell these four animals apart.  And here is that poster:</p>
<p><img src="../../assets/decision-tree.jpeg" alt="Decision-tree"></p>
<p>Since you&rsquo;re a Python master, you know <em>all</em> about the <code>if-elif-else</code> paradigm and Python&rsquo;s <code>and</code> keyword.  And because of this, you are able to write the following script &ndash; which you call find_an_animal.py &ndash; to help you with your problem.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">color <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;What color is the animal? &#39;</span>)
height <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;What is the height of the animal? &#39;</span>))

<span style="color:#66d9ef">if</span> color <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;yellow&#39;</span> <span style="color:#f92672">and</span> height <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span>:
    print(<span style="color:#e6db74">&#39;The animal is a giraffe!&#39;</span>)
<span style="color:#66d9ef">elif</span> color <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;yellow&#39;</span> <span style="color:#f92672">and</span> height <span style="color:#f92672">!=</span> <span style="color:#ae81ff">10</span>:
    print(<span style="color:#e6db74">&#39;The animal is a tiger!&#39;</span>)
<span style="color:#66d9ef">elif</span> color <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;yellow&#39;</span> <span style="color:#f92672">and</span> height <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>:
    print(<span style="color:#e6db74">&#39;The animal is a monkey!&#39;</span>)
<span style="color:#66d9ef">elif</span> color <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;yellow&#39;</span> <span style="color:#f92672">and</span> height <span style="color:#f92672">&gt;=</span> <span style="color:#ae81ff">10</span>:
    print(<span style="color:#e6db74">&#39;The animal is an elephant!&#39;</span>)
</code></pre></div><p>Delighted with your day&rsquo;s work, you go around to each of the exhibits with your laptop in tow.  You can now tell all of the animals apart.  You go to sleep warm and satisfied.</p>
<p>However, upon waking, something occurs to you.  You learned that Python should be readible and have as little redundancy as possible, and the find_an_animal.py script that you wrote yesterday could adhere to these standards slightly better.  In particular, it&rsquo;s somewhat frustrating that the decisions don&rsquo;t execute in the same manner as the poster you saw earlier (also known as a <a href="https://en.wikipedia.org/wiki/Decision_tree">decision tree</a>).  In that poster, you make one decision at a time, rather than having to consider all sets of possible outcomes.</p>
<p>So, on your second day of work, you decide to break new ground by writing your program so that it more closely adheres to the poster.  And here&rsquo;s what you come up with:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">color <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#39;What color is the animal? &#39;</span>)
height <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;What is the height of the animal? &#39;</span>))

<span style="color:#66d9ef">if</span> color <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;yellow&#39;</span>:
    <span style="color:#66d9ef">if</span> height <span style="color:#f92672">==</span> <span style="color:#ae81ff">10</span>:
        print(<span style="color:#e6db74">&#39;The animal is a giraffe!&#39;</span>)
    <span style="color:#66d9ef">else</span>:
        print(<span style="color:#e6db74">&#39;The animal is a tiger!&#39;</span>)
<span style="color:#66d9ef">else</span>:
    <span style="color:#66d9ef">if</span> height <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">10</span>:
        print(<span style="color:#e6db74">&#39;The animal is a monkey!&#39;</span>)
    <span style="color:#66d9ef">else</span>:
        print(<span style="color:#e6db74">&#39;The animal is an elephant!&#39;</span>)
</code></pre></div><p>Woah!  Let&rsquo;s take a look at what you came up with.  Rather than combining every set of possible outcomes, you <em>nested</em> your conditionals, meaning that you have one conditional statement within another.  Although this takes more lines, I hope you&rsquo;ll agree that it is much easier to read and that it much more closely adheres to the poster you saw earlier.</p>
<p>Nesting is useful feature of the <code>if-elif-else</code> paradigm.  It allows us to make multi-level decisions, as illustrated in the example above.  The next exercise will give you some more practice with nesting conditionals.</p>
<hr>
<h3 id="exercise-4-nest-your-own-conditionals">Exercise 4 (Nest your own conditionals)</h3>
<p>I hope you&rsquo;re not tired of the buying-a-dog example yet, because in this exercise we&rsquo;ll be returning to it one more time.  I want you to rewrite the script from <a href="#exercise-3-the-and-keyword">Exercise 3</a> using a nested conditional statement.  Try it out, and if you get stuck, look back at the previous section on <a href="#nesting-conditionals">nested conditionals</a>.</p>
<hr>
<h3 id="the-final-piece-of-the-puzzle-negation">The final piece of the puzzle: Negation</h3>
<p>In this lesson, we&rsquo;ve talked a lot obout conditionals.  So far, you&rsquo;ve learned about the <code>if-elif-else</code> paradigm, met two new keywords (<code>or</code> and <code>and</code>), and tried your hand at nesting conditionals.  In this section, I&rsquo;ll tell you about the final piece of the puzzle.</p>
<p>When it comes to writing the Boolean hypothesis piece of conditional statements, you&rsquo;ve learned about how to write a <em>conjunction</em> of two clauses (e.g., <code>A and B</code>) and you&rsquo;ve learned how to write the <em>disjunction</em> of two clauses (e.g., <code>A or B</code>).  If you&rsquo;re already familiar with <a href="https://en.wikipedia.org/wiki/Boolean_algebra">Boolean logic</a>, you&rsquo;ll know that there&rsquo;s one piece of the puzzle missing, and that piece is how one can write a <em>negation</em> (e.g., <code>not A</code>).  These three operations &ndash; conjunction (<code>and</code>), disjunction (<code>or</code>), and negation (<code>not</code>) &ndash; form the basis of Boolean logic, and allow you to define a wide variety of logical statements.</p>
<p><img src="../../assets/boolean-logic.png" alt="Boolean-logic"></p>
<p>The negation operation allows you to enter a conditional when the Boolean hypothesis is False.  For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">answer <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> answer:
    print(<span style="color:#e6db74">&#39;Why not!? I really want a puppy!&#39;</span>)
<span style="color:#66d9ef">else</span>:
    print(<span style="color:#e6db74">&#39;Yay!&#39;</span>)
</code></pre></div><p>Notice that in this snippet, we can enter the first conditional when <code>answer</code> is False by adding Python&rsquo;s <code>not</code> keyword.  In plain words, you should read this as</p>
<pre><code>if answer is not True:
    then print out the words 'Why not!? I really want a puppy!'
otherwise:
    then print out the words 'Yay!'
</code></pre><p>With the Python keywords <code>and</code>, <code>or</code>, and <code>not</code> in hand, the wide world of Boolean logic is yours to explore!</p>
<hr>
<h3 id="review">Review</h3>
<p>Let&rsquo;s summarize what we&rsquo;ve learned in this lesson.</p>
<ul>
<li>
<p><a href="#what-is-programming">What is programming</a>.  Altough as programmers we may have different motivations or use-cases in mind for writing programs, there is one commonality: Programming is all about decision-making.  At the most abstract level, <strong>programs</strong> are sets of instructions which automate some aspect of decision-making.</p>
</li>
<li>
<p><a href="#what-are-conditionals">What are conditionals</a>.  <strong>Conditional statements</strong> perform one (or multiple) action(s) based on whether a particular Boolean expression is True or False.  Conditionals form the basis of how programs make decisions in nearly all programming languages.</p>
</li>
<li>
<p><a href="#conditionals-in-python-a-first-example">Conditionals in Python: A first example</a>.</p>
</li>
<li>
<p><a href="#exercise-1-a-first-look-at-conditionals">Exercise 1 (A first look at conditionals)</a>.</p>
</li>
<li>
<p><a href="#writing-conditionals-in-python-the-if-elif-else-paradigm">Writing conditionals in Python: The <code>if-elif-else</code> paradigm</a>.  When writing conditionals in Python, there are three keywords that you need to know: <code>if</code>, <code>elif</code>, and <code>else</code>.  These three keywords can be used to define conditional statements in Python using what I call the <code>if-elif-else</code> paradigm.</p>
</li>
<li>
<p><a href="#exercise-2-multiple-conditions">Exercise 2 (Multiple conditions)</a>.</p>
</li>
<li>
<p><a href="#conditionals-of-all-shapes-and-sizes">Conditionals of all shapes and sizes</a>.  It often improves readibility and conciseness to condence conditionals that lead to the same outcome.  One way to do this is by means of the <code>or</code> keyword, which allows you to enter a conditional statement if either or both of the conditions specified are True.</p>
</li>
<li>
<p><a href="#exercise-3-the-and-keyword">Exercise 3 (The <code>and</code> keyword)</a>.  In a similar vein, the <code>and</code> keyword allows you to enter a conditional if both of the supplied conditions are True.</p>
</li>
<li>
<p><a href="#nesting-conditionals">Nesting conditionals</a>.  Conditionals can be nested within one another.  This can improve readibility in some cases, and can be more consistent with human notions of logic.</p>
</li>
<li>
<p><a href="#exercise-4-nest-your-own-conditionals">Exercise 4 (Nest your own conditionals)</a>.</p>
</li>
<li>
<p><a href="#the-final-piece-of-the-puzzle-negation">The final piece of the puzzle: Negation</a>.  In addition to specifying conjuncations (e.g., <code>A and B</code>) and disjunctions (e.g., <code>A or B</code>) in conditionals, one can also specify the negation of a variable (e.g., <code>not A</code>) via Python&rsquo;s <code>not</code> keyword.</p>
</li>
</ul>
<hr>
<h3 id="bonus-content-i-the-ternary-operator">Bonus content I: The ternary operator</h3>
<p>It&rsquo;s time for some bonus content!  Yes you heard that right - you got to the end of this lesson, and you deserve a reward.  And today, your first reward is going to be Python&rsquo;s <a href="https://en.wikipedia.org/wiki/Ternary_conditional_operator">ternary operator</a> syntax.  Before I tell you what that means, a word of caution: I don&rsquo;t like ternary operators, and I rarely use them in my code.  They aren&rsquo;t particularly readible, and while they&rsquo;re compact, this doesn&rsquo;t necessarily lead to a better program.  For these reasons, a discussion of ternary operators was relegated (by me) to the bonus content.</p>
<p>And so to you, dear reader, I say: Caveat emptor.  But without further adieu, let&rsquo;s jump right into it.</p>
<blockquote>
<p>A ternary operator allows you to perform and <code>if-else</code> statement in a single line.</p>
</blockquote>
<p>In this way, if you wanted to write our recurring buy_a_dog.py script in fewer lines, you could do the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Should you buy the dog?&#39;</span>)
dog_weight <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;How much does the candidate dog weigh (in lbs)? &#39;</span>))

outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Yes!&#34;</span> <span style="color:#66d9ef">if</span> (<span style="color:#ae81ff">40</span> <span style="color:#f92672">&lt;=</span> dog_weight <span style="color:#f92672">and</span> dog_weight <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span>) <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;No.&#34;</span>
print(outcome)
</code></pre></div><p>Once you run this code, you&rsquo;ll see that this concise sytanx will get the job done: It will print &ldquo;Yes!&rdquo; if the weight of the dog is in the correct range, and &ldquo;No.&rdquo; otherwise.  But if you&rsquo;re asking me, there were better versions of this script in this lesson, which are easier to read for future maintainers of your code.</p>
<hr>
<h3 id="bonus-content-ii-concise-comparisons">Bonus content II: Concise comparisons</h3>
<p>By the way, when considering the example from the previous <a href="#bonus-content-i-the-ternary-operator">bonus content section</a>, this would also work:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#39;Should you buy the dog?&#39;</span>)
dog_weight <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;How much does the candidate dog weigh (in lbs)? &#39;</span>))

outcome <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Yes!&#34;</span> <span style="color:#66d9ef">if</span> <span style="color:#ae81ff">40</span> <span style="color:#f92672">&lt;=</span> dog_weight <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">90</span> <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;No.&#34;</span>
print(outcome)
</code></pre></div><p>That is, <code>40 &lt;= dog_weight and dog_weight &lt;= 90</code> is equivalent to <code>40 &lt;= dog_weight &lt;= 90</code> in Python.  This little trick makes the ternary operator a little bit more readible.  But still, my sentiments regarding the ternary operator remain.</p>
<hr>
<h3 id="bonus-content-iii-match-statements">Bonus content III: Match statements</h3>
<p>You know that I always like to spill the hottest tea for you, and the release of Python 3.10 last year has provided just that.  In this lesson, you met conditionals, which follow the <code>if-elif-else</code> structure.  This is the traditional way of writing conditionals; most other langauges (e.g., Java, C++, MATLAB, etc.) have a similar syntax.</p>
<p>However, there is a new sheriff in town, and he&rsquo;s here to stay.  And that sheriff is known as the <code>match</code> statement.  Here&rsquo;s how it works.  Let&rsquo;s return to the script we wrote in the section on <a href="#writing-conditionals-in-python-the-if-elif-else-paradigm">the <code>if-elif-else</code> paradigm</a> that tells us a cool fact about each of the numbers between 1 and 4.  In that section, we used <code>if</code>, <code>elif</code>, and <code>else</code> to define five different logical cases.  This was all good and well, but it was a little bit cumbersome.  We had to write the variable name <code>my_number</code> and the <code>==</code> sign four times.  And if our Boolean conditions had become more complicated, this program would easily have started to look like a mess.</p>
<p>This is precisely the motivation for <code>match</code> statements.  Below, I&rsquo;ve written a program equivalent to the one you saw earlier using a <code>match</code> statement.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">my_number <span style="color:#f92672">=</span> int(input(<span style="color:#e6db74">&#39;Enter a number between 1 and 4: &#39;</span>))

match my_number:
    case <span style="color:#ae81ff">1</span>:
        print(<span style="color:#e6db74">&#34;You entered the first (and second) Fibonacci number!&#34;</span>)
    case <span style="color:#ae81ff">2</span>:
        print(<span style="color:#e6db74">&#34;You entered the smallest prime number!&#34;</span>)
    case <span style="color:#ae81ff">3</span>:
        print(<span style="color:#e6db74">&#34;According to Pythagoras, you entered the &#39;noblest&#39; of digits!&#34;</span>)
    case <span style="color:#ae81ff">4</span>:
        print(<span style="color:#e6db74">&#34;You entered the only number that is spelled with the same number of characters as the number itself!&#34;</span>)
    case other:
        print(<span style="color:#e6db74">&#34;Make sure you enter a number between 1 and 4!&#34;</span>)
</code></pre></div><p>This is much cleaner.  The <code>match my_number</code> line signals that the program should check whether or not <code>my_number</code> is equal to any of the ensuing cases.  So for instance, <code>case 1:</code> is equivalent to <code>if my_number == 1:</code>.  Similary, the keyword <code>other</code> here used in the <code>case other:</code> line is equivalent to <code>else:</code> in the <code>if-elif-else</code> paradigm.</p>
<p>Of course, conditionals can be much more complicated than this.  And when the going gets tough, match statements tend to rise to the occasion.  I won&rsquo;t elaborate further in this set of notes, but if you&rsquo;re interested, there is a nice documentation page on match statements <a href="https://peps.python.org/pep-0636/">here</a>.</p>
<hr>
<h3 id="additional-exercises">Additional exercises</h3>
<h4 id="exercise-5-using-and-or-and-not">Exercise 5 (Using <code>and</code>, <code>or</code>, and <code>not</code>)</h4>
<p>Let&rsquo;s say we have three Boolean variables: <code>a</code>, <code>b</code>, and <code>c</code>.  For the sake of the exercise, let&rsquo;s arbitarily set their values to <code>a = True</code>, <code>b = False</code>, and <code>c = True</code>.  Your job is to determine the whether the following statements are True or False:</p>
<ol>
<li><code>not b</code></li>
<li><code>a and b</code></li>
<li><code>a and c</code></li>
<li><code>not a and not b</code></li>
<li><code>a and b and c</code></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Lists</title>
            <link>https://arobey1.github.io/python/lists/</link>
            <pubDate>Mon, 26 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://arobey1.github.io/python/lists/</guid>
            <description>You&amp;rsquo;re back! We&amp;rsquo;ve got a lot to cover in this lesson, so let&amp;rsquo;s get right into it. The goal is introduce another fundamental data type: the list. Lists are crucial to almost every programming language out there, and Python is no excetpion.
 A motivating example: Why we need lists in Python Let&amp;rsquo;s say that you&amp;rsquo;re an avid reader. You read all sorts of things. Technical books, novels, the occasional murder mystery, biographies, poetry, you name it!</description>
            <content type="html"><![CDATA[<p>You&rsquo;re back!  We&rsquo;ve got a lot to cover in this lesson, so let&rsquo;s get right into it.  The goal is introduce another fundamental data type: the list.  Lists are crucial to almost every programming language out there, and Python is no excetpion.</p>
<hr>
<h3 id="a-motivating-example-why-we-need-lists-in-python">A motivating example: Why we need lists in Python</h3>
<p>Let&rsquo;s say that you&rsquo;re an avid reader.  You read all sorts of things.  Technical books, novels, the occasional murder mystery, biographies, poetry, you name it!  But here&rsquo;s the problem.  You encouter so many books that you can&rsquo;t remember them all.  And so you&rsquo;d like some way of remembering the books you&rsquo;ve seen so that one day, you can head to your local bookstore and buy to your heart&rsquo;s content.</p>
<p>Ideally, we&rsquo;d like to be able to save a list of books in a variable so that we can look back at it later.  Sadly, we haven&rsquo;t yet met a data type that can handle such a task.  One hacky solution would be to write a long Python string, for which Python has a special syntax:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> myBooks <span style="color:#f92672">=</span> (
    <span style="color:#e6db74">&#34;How to Do Nothing: Resisting the Attention Economy&#34;</span> \
    <span style="color:#e6db74">&#34;Norwegian Wood&#34;</span> \
    <span style="color:#e6db74">&#34;Optimization for Data Analysis&#34;</span> \
    <span style="color:#e6db74">&#34;A Tale for the Time Being&#34;</span>
)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myBooks)
<span style="color:#e6db74">&#39;How to Do Nothing: Resisting the Attention EconomyNorwegian WoodOptimization for Data AnalysisA Tale for the Time Being&#39;</span>
</code></pre></div><p>Hopefully it&rsquo;s clear why this isn&rsquo;t a great solution. For starters, t&rsquo;s won&rsquo;t be easy to add or remove books from this reading list.  Furthermore, the books are also all smushed together, which will make things harder when I&rsquo;m trying to quickly look through the titles.  Ideally, I&rsquo;d like to be able to have each book saved as a separate value, and I&rsquo;d like to have a straightforward way to iterate through and update this list.</p>
<p>These needs set the stage for our new data type: the list.</p>
<hr>
<h3 id="lists-in-python">Lists in Python</h3>
<p>Lists are one of the most important data types in any programming language.</p>
<blockquote>
<p><strong>Lists</strong> allow you to store multiple values in a single variable.</p>
</blockquote>
<p>The sytax is quite straightforward.  Returning to our earlier example, we can create a list to store my reading list as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> myBooks <span style="color:#f92672">=</span> [
    <span style="color:#e6db74">&#34;How to Do Nothing: Resisting the Attention Economy&#34;</span>, 
    <span style="color:#e6db74">&#34;Norwegian Wood&#34;</span>, 
    <span style="color:#e6db74">&#34;Optimization for Data Analysis&#34;</span>, 
    <span style="color:#e6db74">&#34;A Tale for the Time Being&#34;</span>
]
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myBooks)
[<span style="color:#e6db74">&#39;How to Do Nothing: Resisting the Attention Economy&#39;</span>, <span style="color:#e6db74">&#39;Norwegian Wood&#39;</span>, <span style="color:#e6db74">&#39;Optimization for Data Analysis&#39;</span>, <span style="color:#e6db74">&#39;A Tale for the Time Being&#39;</span>]
</code></pre></div><p>The square brackets signify that this variable is a list, and each item in a list is separated by a trailing comma.  Lists can contain any of the other data types we&rsquo;ve met so far.  For example, all of the following are valid lists:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> fruits <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;apple&#39;</span>, <span style="color:#e6db74">&#39;banana&#39;</span>, <span style="color:#e6db74">&#39;pear&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> numbers <span style="color:#f92672">=</span> [<span style="color:#ae81ff">32</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">33</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> miscellaneous <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#66d9ef">True</span>, <span style="color:#e6db74">&#39;fantastisch&#39;</span>, <span style="color:#ae81ff">5.432</span>]
</code></pre></div><p>Recalling what we learned about the <a href="https://arobey1.github.io/python/variables_data_types/#exercise-1-review-of-data-types" title="Type function">type function</a>, we can call the type function on any of the variables we created above to confirm that they have the &lsquo;list&rsquo; data type:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> type(fruits)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">list</span><span style="color:#e6db74">&#39;&gt;</span>
</code></pre></div><p>Before talking more about lists, here&rsquo;s an exercise to get some more practice with lists.</p>
<hr>
<h4 id="exercise-1-creating-lists">Exercise 1 (Creating lists)</h4>
<p>Let&rsquo;s start with something simple.  Write a script called my_favorites.py to make a list of all of your favorite things.  Your script should accept inputs from the user, and then put those inputs into a list.  Here&rsquo;s what mine would look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python my_favorites.py
Enter your favorite color: orange
Enter your favorite number: <span style="color:#ae81ff">23</span>
Enter your favorite sports team: Arsenal
Enter your favorite activity: crossword puzzles

Here<span style="color:#e6db74">&#39;s a list with all of your favorite things:
</span><span style="color:#e6db74">[&#39;</span>orange<span style="color:#e6db74">&#39;, 23, &#39;</span>Arsenal<span style="color:#e6db74">&#39;, &#39;</span>crossword puzzles<span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#f92672">]</span>
</code></pre></div><hr>
<h3 id="indexing-into-a-list">Indexing into a list</h3>
<p>Lets return to our motivating example, wherein we created a list variable called <code>myBooks</code> containing four different titles.  Let&rsquo;s say that I&rsquo;ve read the first two books in my list &ndash; &ldquo;How to Do Nothing: Resisting the Attention Economy&rdquo; and &ldquo;Norwegian Wood&rdquo; &ndash; and now I&rsquo;m ready to start the third book.  How can I pull out the third book from my list?</p>
<p>To answer this question, we need to talk about indexing.  When I create a list, each item in that list has what&rsquo;s known as an index.</p>
<blockquote>
<p>An index specifies the position of an item in a list.</p>
</blockquote>
<p>Indices in Python start from 0, and they are read from left to right.  So in the <code>myBooks</code> example, the index of &ldquo;How to Do Nothing: Resisting the Attention Economy&rdquo; would be 0, the index of &ldquo;Norwegian Wood&rdquo; would be 1, and so on.</p>
<p>In Python, there is a simple syntax for retreiving an item at a particular index in a list.  For instance, to retreive each item in <code>myBooks</code>, I can write the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> print(myList[<span style="color:#ae81ff">0</span>])
<span style="color:#e6db74">&#39;How to Do Nothing: Resisting the Attention Economy&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myList[<span style="color:#ae81ff">1</span>])
<span style="color:#e6db74">&#39;Norwegian Wood&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myList[<span style="color:#ae81ff">2</span>])
<span style="color:#e6db74">&#39;Optimization for Data Analysis&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myList[<span style="color:#ae81ff">3</span>])
<span style="color:#e6db74">&#39;A Tale for the Time Being&#39;</span>
</code></pre></div><p>It may be slightly unintuitive that Python&rsquo;s indexing scheme starts from zero (instead of one), but over time, this will become second nature to you.</p>
<hr>
<h4 id="exercise-2-indexing-into-lists">Exercise 2 (Indexing into lists)</h4>
<p>In a script called retreive_items.py, create a list called <code>my_special_list</code> and save any list you want in this variable.  For example, in my version of retreive_items.py, <code>my_special_list = ['Hungry', 'hungry', 'hippos']</code>.  Start by printing that list out to the console, and then ask a user for an index for your list.  Then print out the item at that index in <code>my_special_list</code>.  Your output should look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#960050;background-color:#1e0010">$</span> python retreive_items<span style="color:#f92672">.</span>py
Your list <span style="color:#f92672">is</span>: [<span style="color:#e6db74">&#39;Hungry&#39;</span>, <span style="color:#e6db74">&#39;hungry&#39;</span>, <span style="color:#e6db74">&#39;hippos&#39;</span>]
Enter an index: <span style="color:#ae81ff">2</span>
The item at index <span style="color:#ae81ff">2</span> <span style="color:#f92672">is</span>: hippos
</code></pre></div><p>Hint: Recall that the input function saves whatever you input as a string, so you&rsquo;ll need to use the <code>int</code> function to turn your input into an integer.</p>
<hr>
<h3 id="methods-on-lists">Methods on lists</h3>
<p>Now that we&rsquo;ve got the hang of creating lists and indexing into them, let&rsquo;s talk about some of the operations we can do on lists.  In this section, we&rsquo;ll discuss five of the most useful list operations.</p>
<p><strong>Length.</strong> One of the most basic list operations is to determine how many items are in a list, a quantity that is commonly known as a list&rsquo;s length.</p>
<blockquote>
<p>The length of a list is the number of elements in that list.</p>
</blockquote>
<p>To calculate the length of a list, we can use the <code>len</code> function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> musketeers <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Athos&#39;</span>, <span style="color:#e6db74">&#39;Porthos&#39;</span>, <span style="color:#e6db74">&#39;Aramis&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> print(len(musketeers))
<span style="color:#ae81ff">3</span>
</code></pre></div><p><strong>Append.</strong>  Also popular is the <code>append</code> method, which allows you to add a new element to the end of a list.  Here it is in action:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> title <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Harry&#39;</span>, <span style="color:#e6db74">&#39;Potter&#39;</span>, <span style="color:#e6db74">&#39;and&#39;</span>, <span style="color:#e6db74">&#39;the&#39;</span>, <span style="color:#e6db74">&#39;Deathly&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> title<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;Hallows&#39;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(title)
[<span style="color:#e6db74">&#39;Harry&#39;</span>, <span style="color:#e6db74">&#39;Potter&#39;</span>, <span style="color:#e6db74">&#39;and&#39;</span>, <span style="color:#e6db74">&#39;the&#39;</span>, <span style="color:#e6db74">&#39;Deathly&#39;</span>, <span style="color:#e6db74">&#39;Hallows&#39;</span>]
</code></pre></div><p><strong>Insert.</strong>  Sometimes, rather than adding an item to the end of a list, we may want to insert a value into a list at a particular index.  This can be accomplished using the <code>insert</code> method, which takes two arguments: an index and a value.  For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> lyrics <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;Row&#39;</span>, <span style="color:#e6db74">&#39;row&#39;</span>, <span style="color:#e6db74">&#39;row&#39;</span>, <span style="color:#e6db74">&#39;boat&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> lyrics<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">3</span>, <span style="color:#e6db74">&#39;your&#39;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(lyrics)
[<span style="color:#e6db74">&#39;Row&#39;</span>, <span style="color:#e6db74">&#39;row&#39;</span>, <span style="color:#e6db74">&#39;row&#39;</span>, <span style="color:#e6db74">&#39;your&#39;</span>, <span style="color:#e6db74">&#39;boat&#39;</span>]
</code></pre></div><p>As you can see, this function inserts &lsquo;your&rsquo; so that <code>lyrics[3] = 'your'</code>.</p>
<p><strong>Reverse.</strong>  Another fun way to manipulate a list is to reverse the order of its items.  A list can be reversed via the <code>reverse</code> method:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> greek <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;alpha&#39;</span>, <span style="color:#e6db74">&#39;beta&#39;</span>, <span style="color:#e6db74">&#39;gamma&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> greek<span style="color:#f92672">.</span>reverse()
<span style="color:#f92672">&gt;&gt;&gt;</span> print(greek)
[<span style="color:#e6db74">&#39;gamma&#39;</span>, <span style="color:#e6db74">&#39;beta&#39;</span>, <span style="color:#e6db74">&#39;alpha&#39;</span>]
</code></pre></div><p><strong>Pop.</strong>  And finally, the <code>pop</code> method will allow you to remove elements from your list.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> pets <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;bunny&#39;</span>, <span style="color:#e6db74">&#39;cat&#39;</span>, <span style="color:#e6db74">&#39;dog&#39;</span>, <span style="color:#e6db74">&#39;tiger&#39;</span>, <span style="color:#e6db74">&#39;hampster&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> pets<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">3</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(pets)
[<span style="color:#e6db74">&#39;bunny&#39;</span>, <span style="color:#e6db74">&#39;cat&#39;</span>, <span style="color:#e6db74">&#39;dog&#39;</span>, <span style="color:#e6db74">&#39;hampster&#39;</span>]
</code></pre></div><p>The argument to the pop method specifies the index of the item to remove.  In this case, since we passed the number 3 as an argument to <code>pop</code>, the item at index 3 was removed (in this case, &lsquo;tiger&rsquo;).</p>
<hr>
<h4 id="exercise-3-its-almost-like-wordle">Exercise 3 (It&rsquo;s almost like Wordle!)</h4>
<p>Do you guys know <a href="https://www.nytimes.com/games/wordle/index.html">Wordle</a>?  That game where you have like five guesses to figure out what a secret word is.  Yeah, it&rsquo;s not my favorite, but lots of people swear by it.</p>
<p>In this exercise, we&rsquo;re going to do something that&rsquo;s a cross between Wordle and a <a href="https://en.wikipedia.org/wiki/Word_ladder">word ladder</a>.  Here&rsquo;s the game.  I am going to give you a list of characters that spells a word.  Your job is to use the methods we met above to transform the first word into the second word.  For example, let&rsquo;s say our starting word is <code>['g', 'r', 'e', 'e', 'n']</code> and our ending word is <code>['e', 'g', 'r', 'e', 't']</code>.  The following sequence of commands can transform the first word into the second.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> start_word <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;n&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> end_word <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;t&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> start_word<span style="color:#f92672">.</span>insert(<span style="color:#ae81ff">0</span>, <span style="color:#e6db74">&#39;e&#39;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(start_word)
[<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;n&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> start_word<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">5</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(start_word)
[<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> start_word<span style="color:#f92672">.</span>pop(<span style="color:#ae81ff">4</span>)
[<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> start_word<span style="color:#f92672">.</span>append(<span style="color:#e6db74">&#39;t&#39;</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(start_word)
[<span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;g&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;t&#39;</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> start_word <span style="color:#f92672">==</span> end_word
<span style="color:#66d9ef">True</span>
</code></pre></div><p>Here&rsquo;s your task.  I&rsquo;ll give you a few pairs of words, and you need to determine how to get from one sequence to another.  Good luck!</p>
<ol>
<li><code>start_word = ['d', 'r', 'a', 'w']</code> and <code>end_word = ['w', 'a', 'r', 't']</code>.</li>
<li><code>start_word = ['h', 'e', 'l', 'l', 'o']</code> and <code>end_word = ['w', 'o', 'r', 'l', 'd']</code>.</li>
<li><code>start_word = ['k', 'l', 'e', 'i', 'n']</code> and <code>end_word = ['k', 'a', 't', 'z', 'e']</code>.</li>
</ol>
<hr>
<h3 id="slicing-a-list">Slicing a list</h3>
<p>Now that we&rsquo;ve learned what indexing is, it&rsquo;s about time that we talked about slicing.  Slicing is like indexing on steroids.</p>
<blockquote>
<p>Slicing allows you to select multiple elements from the same list.</p>
</blockquote>
<p>For instance, let&rsquo;s say that I wanted to update <code>myBooks</code> to make a new reading list that only contains the last two books.  With indexing, I would have to do something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> thirdBook <span style="color:#f92672">=</span> myBooks[<span style="color:#ae81ff">2</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> fourthBook <span style="color:#f92672">=</span> myBooks[<span style="color:#ae81ff">3</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> newBookList <span style="color:#f92672">=</span> [thirdBook, fourthBook]
<span style="color:#f92672">&gt;&gt;&gt;</span> print(newBookList)
[<span style="color:#e6db74">&#39;Optimization for Data Analysis&#39;</span>, <span style="color:#e6db74">&#39;A Tale for the Time Being&#39;</span>]
</code></pre></div><p>This works, but it isn&rsquo;t scalable.  If my reading list was much longer, this would take many more lines of code, since I need one line for each book I want to select.</p>
<p>Luckily, slicing gives us a much faster way of solving this problem.  To slice the end of a list, I can do the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> newBookList <span style="color:#f92672">=</span> bookList[<span style="color:#ae81ff">2</span>:]
<span style="color:#f92672">&gt;&gt;&gt;</span> print(newBookList)
[<span style="color:#e6db74">&#39;Optimization for Data Analysis&#39;</span>, <span style="color:#e6db74">&#39;A Tale for the Time Being&#39;</span>]
</code></pre></div><p>Slicing a list is always characterized by one (or multiple) colons in the square brackets.  The 2 right before the colon means that the slicing operation will start from index 2 and slice off everything until the end of the list.</p>
<p>If, instead of slicing to the end of the list, we only wanted to slice off the middle two books, we can simply an index before and after the colon:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> print(bookList[<span style="color:#ae81ff">1</span>:<span style="color:#ae81ff">3</span>])
[<span style="color:#e6db74">&#39;Norwegian Wood&#39;</span>, <span style="color:#e6db74">&#39;Optimization for Data Analysis&#39;</span>]
</code></pre></div><p>As you may have realized, there&rsquo;s a general principle at play here.  Let&rsquo;s say we have a list called <code>a</code>.  The rules of slicing in Python are as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> a[start:stop]  <span style="color:#75715e"># items from start through stop-1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> a[start:]      <span style="color:#75715e"># items from start through the end of the list</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> a[:stop]       <span style="color:#75715e"># items from the beginning through stop-1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> a[:]           <span style="color:#75715e"># a copy of the whole array</span>
</code></pre></div><p>The tricky part is that the <code>stop</code> argument will slice until index <code>stop-1</code>.  In time, this will become second nature to you.</p>
<hr>
<h4 id="exercise-4-slicing-and-dicing">Exercise 4 (Slicing and dicing)</h4>
<p>If you thought that was neat, you&rsquo;re going to love this.  Slicing can get even more involved if you want to select items from a list according to a pattern, e.g., selecting all of the elements with an even or odd index.  Rather than illustrating how to use the syntax, I&rsquo;m going to tell you the general principle, and leave it to you to try it out.  If, as before, we have a list called <code>a</code>, the general syntax for slicing is as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> a[start:stop:step]
</code></pre></div><p>This means that your slice will start at index <code>start</code>, end at index <code>stop-1</code>, and proceed with step size <code>step</code>.  Here&rsquo;s a sample output from the script &ndash; which we&rsquo;ll call fancy_slicing.py &ndash; that I want you to write:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python fancy_slicing.py
Your list is: <span style="color:#f92672">[</span>0, 1, 2, 3, 4, 5, 6, 7, 8, 9<span style="color:#f92672">]</span>
Enter <span style="color:#e6db74">&#34;start&#34;</span> index: <span style="color:#ae81ff">1</span>
Enter <span style="color:#e6db74">&#34;stop&#34;</span> index: <span style="color:#ae81ff">8</span>
Enter <span style="color:#e6db74">&#34;step&#34;</span> index: <span style="color:#ae81ff">2</span>

Your slice is: <span style="color:#f92672">[</span>1, 3, 5, 7<span style="color:#f92672">]</span>
</code></pre></div><p>Start by defining any list in a variable called <code>my_list</code>, and print that list out to the user.  I recommend using a list with a bunch of numbers in order, because it&rsquo;ll make it easier to see what&rsquo;s going on.  Prompt the user for a <code>start</code> and <code>stop</code> index as well as a <code>step</code> size.  Then print out what you get by slicing into <code>my_list</code> via the slicing operation: <code>my_list[start:stop:step]</code>.</p>
<p>Try this out with a bunch of combinations to get familiar with slicing in Python.  And make sure you keep fancy_slicing.py handy; we&rsquo;re going to need it in a couple of future exercises in this lesson.</p>
<hr>
<h3 id="meet-the-range-function">Meet the range function</h3>
<p>When working on the previous exercise, did you think to yourself: Wouldn&rsquo;t it be nice if I didn&rsquo;t have to type out a list of numbers to create <code>my_list</code>?  Why doesn&rsquo;t Python have any functionality so that I can make a list like <code>[0,1,2,3,4,5,6,7,8,9]</code> really quickly?</p>
<p>Well, if you happened to have that thought, then you&rsquo;re in luck!  Python does have such a function, and it&rsquo;s called <strong>range</strong>.</p>
<blockquote>
<p>The range function returns a sequence of numbers, which by default start from zero and come in increments of one, and stop at a user-specified number.</p>
</blockquote>
<p>The <code>range</code> function is another crucial piece of Python that you&rsquo;ll see in almost every program you&rsquo;ll encounter.  Interestingly, the <code>range</code> function has a similar syntax to the syntax for slicing.  In general, <code>range</code> takes three arguments: a number to start the range, a number to end the range, and a step size.  Here are some examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> list(range(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">1</span>))
[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> list(range(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">15</span>, <span style="color:#ae81ff">2</span>))
[<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">13</span>]
</code></pre></div><p>Range is most often used to generate a sequence of numbers starting from zero.  To do this, one can simply call the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> list(range(<span style="color:#ae81ff">10</span>))
[<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">8</span>, <span style="color:#ae81ff">9</span>]
</code></pre></div><p>Note that just as with slicing, range will include numbers up <code>stop-1</code>.  Furthermore, you might have already noticed that we are wrapping the range function with the <code>list</code> function.  Like the <code>int</code>, <code>float</code>, <code>bool</code>, and <code>str</code> functions that we&rsquo;ve met in the previous lesson on <a href="https://arobey1.github.io/python/interacting_with_python/#converting-between-data-types" title="Interacting with Python">Math operations</a>, the <code>list</code> function transforms other data types into lists.  When you call range without converting it to a list, you&rsquo;ll get something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> ls <span style="color:#f92672">=</span> range(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(ls)
range(<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">9</span>, <span style="color:#ae81ff">4</span>)
<span style="color:#f92672">&gt;&gt;&gt;</span> type(ls)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">range</span><span style="color:#e6db74">&#39;&gt;</span>
</code></pre></div><p>You may have expected <code>range</code> to have the &lsquo;list&rsquo; data type, but notice that &lsquo;range&rsquo; is actually it&rsquo;s own type in Python.  Why is that?  If you&rsquo;re interested, read on; it not, there&rsquo;s a couple of exercises waiting for you down below.</p>
<hr>
<h3 id="why-range-has-its-own-type">Why range has its own type</h3>
<p>Let&rsquo;s talk about where we are right now (circa December 2022).  The current version of Python is 3.10, which was released in October of 2021.  Rewinding all the way back to the early 2000s, Python 2 was the standard.  In Python 2, <code>range</code> returned a list, as one might expect.  However, problems started arise from <code>range</code> having this type.  To see why, consider the following code snippet:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> big_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">1000000000000000</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> big_range <span style="color:#f92672">=</span> range(big_number)
</code></pre></div><p>If <code>range</code> directly created a list, when we create <code>big_range</code>, we would be creating a list with 1000000000000000 entries.  This can potentially take up <em>a lot</em> of space in memory, causing our code to slow down significantly.</p>
<p>To avoid this, in Python 3, <code>range</code> now returns a what&rsquo;s known as a generator object, which does not need to store the entire list in memory.  This is far more efficient.  We&rsquo;ll talk more about this in a future lesson.</p>
<p>To close up this history lesson, I&rsquo;ll note that in 2020, Python 2 met what&rsquo;s known as it&rsquo;s &ldquo;end of life&rdquo; (sometimes abbreviated as EOL, meaning that it&rsquo;s not longer supported by the Python development team.  Just like codebases, programming languages are actively developed to provide more functionality, make them faster, and improve readibility.</p>
<hr>
<h4 id="exercise-5-making-our-life-easier-with-range">Exercise 5 (Making our life easier with range)</h4>
<p>Let&rsquo;s go back to <a href="#exercise-4-slicing-forwards-and-backwards">Exercise 4</a>.  In this exercise, you created a variable called <code>my_list</code>.  Now that you&rsquo;ve learned how range works, go back and update your code so that <code>my_list</code> is created using the <code>range</code> function.</p>
<hr>
<h4 id="exercise-6-a-slicing-challenge">Exercise 6 (A slicing challenge)</h4>
<p>Hopefully you completed the last exercise without too much trouble.  In this exercise, we&rsquo;re going to use the script you wrote in <a href="#exercise-4-slicing-forwards-and-backwards">Exercise 4</a> and then updated in <a href="#exercise-5-making-our-life-easier-with-range">Exercise 5</a> to test how well you&rsquo;ve understood slicing.</p>
<p>So that we&rsquo;re on the same page, start by defining <code>my_list = list(range(10))</code>.  Next, I&rsquo;m going to give you a sequence of sliced lists, and your job is to come up with the <code>start</code>, <code>stop</code>, and <code>step</code> inputs to your program that will return these slices.  Are you ready?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">6</span>, <span style="color:#ae81ff">8</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">5</span>, <span style="color:#ae81ff">7</span>, <span style="color:#ae81ff">9</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">6</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> [<span style="color:#ae81ff">3</span>, <span style="color:#ae81ff">6</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> [<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">4</span>, <span style="color:#ae81ff">7</span>]
<span style="color:#f92672">&gt;&gt;&gt;</span> [<span style="color:#ae81ff">8</span>]
</code></pre></div><hr>
<h3 id="strings-what-does-this-have-to-do-with-strings">Strings? What does this have to do with strings?</h3>
<p>This whole lesson has been about lists.  We&rsquo;ve learned about indexing lists, applying functions to lists, and slicing lists.  Now, what if I told you that much of what we learned today applied not only to lists, but also to strings?  Yes, it&rsquo;s true!</p>
<p>A string can be indexed and sliced in exactly the same way as a list.  For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> myString <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Die Essen ist sehr lecker!&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myString[<span style="color:#ae81ff">10</span>])
<span style="color:#e6db74">&#39;i&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(myString[<span style="color:#ae81ff">0</span>::<span style="color:#ae81ff">2</span>])
<span style="color:#e6db74">&#39;DeEsnitsh ekr&#39;</span>
</code></pre></div><p>You can even turn a string into a list of characters:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> string <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Hello world!&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> list_string <span style="color:#f92672">=</span> list(string)
<span style="color:#f92672">&gt;&gt;&gt;</span> print(list_string)
[<span style="color:#e6db74">&#39;H&#39;</span>, <span style="color:#e6db74">&#39;e&#39;</span>, <span style="color:#e6db74">&#39;l&#39;</span>, <span style="color:#e6db74">&#39;l&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39; &#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>, <span style="color:#e6db74">&#39;r&#39;</span>, <span style="color:#e6db74">&#39;l&#39;</span>, <span style="color:#e6db74">&#39;d&#39;</span>, <span style="color:#e6db74">&#39;!&#39;</span>]
</code></pre></div><p>This can come in really handy in fields like bioinformatics, where one of the main goals is to find matching subsequences in long chains of base pairs.</p>
<hr>
<h3 id="review">Review</h3>
<p>Let&rsquo;s summarize what we&rsquo;ve learned in this lesson.</p>
<ul>
<li>
<p><a href="#a-motivating-example-why-we-need-lists-in-python">A motivating example: Why we need lists in Python</a>.</p>
</li>
<li>
<p><a href="#lists-in-python">Lists in Python</a>.  The list data type in Python allows you to store multiple values in a single variable.</p>
</li>
<li>
<p><a href="#exercise-1-creating-lists">Exercise 1 (Creating lists)</a></p>
</li>
<li>
<p><a href="#indexing-into-a-list">Indexing into a list</a>.  The location of an item in a list is called it&rsquo;s index.  Indexing in Python starts from zero, and proceeds from left to right.</p>
</li>
<li>
<p><a href="#exercise-2-indexing-into-lists">Exercise 2 (Indexing into lists)</a></p>
</li>
<li>
<p><a href="#methods-on-lists">Methods on lists</a>.  We met five important operations that can be performed on lists: the <code>len</code> function calculates the length &ndash; or number of elements &ndash; in a list; the <code>append</code> method adds an item to the end of a list; the <code>insert</code> method inserts an item at a particular index; the <code>reverse</code> method reverses the order of the items in a list; and finally, the <code>pop</code> function removes the item at a particular index.</p>
</li>
<li>
<p><a href="#exercise-3-its-almost-like-wordle">Exercise 3 (It&rsquo;s almost like Wordle!)</a>.</p>
</li>
<li>
<p><a href="#slicing-a-list">Slicing a list</a>.  Slicing allows you to select multiple elements from the same list.  Given a list (say it&rsquo;s called <code>a</code>), slicing is performed by running <code>a[start:stop:step]</code>, where <code>start</code> is the starting index, <code>stop-1</code> is the ending index, and <code>step</code> is the step increment.</p>
</li>
<li>
<p><a href="#exercise-4-slicing-and-dicing">Exercise 4 (Slicing and dicing)</a>.</p>
</li>
<li>
<p><a href="#meet-the-range-function">Meet the range function</a>.  The range function returns a sequence of numbers.  By default, these numbers start at zero and are incremented by one.  The list ends at a user-supplied input.  The <code>list</code> function can transform variables of other data types into lists.</p>
</li>
<li>
<p><a href="#why-range-has-its-own-type">Why range has its own type</a>.  If range returned a list data type, it would need to store the entire list it creates in memory.  When the list is very large, this can slow down your program.  To fix this, range returns a generator object, which does not need to store every part of the list in memory.</p>
</li>
<li>
<p><a href="#exercise-5-making-our-life-easier-with-range">Exercise 5 (Making our life easier with range)</a>.</p>
</li>
<li>
<p><a href="#exercise-6-a-slicing-challenge">Exercise 6 (A slicing challenge)</a>.</p>
</li>
<li>
<p><a href="#strings-what-does-this-have-to-do-with-strings">Strings? What does this have to do with strings?</a>  Many operations that work on lists, such as indexing and slicing, also work on strings.  The <code>list</code> function can be called on any string to turn that string into a list of characters.</p>
</li>
</ul>
<hr>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>Hopefully you feel more comfortable working with lists now than you did at the start of this lesson.  I&rsquo;ll see you in the next lessons on lists!</p>
]]></content>
        </item>
        
        <item>
            <title>Math operations</title>
            <link>https://arobey1.github.io/python/math_operations/</link>
            <pubDate>Sat, 24 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://arobey1.github.io/python/math_operations/</guid>
            <description>Welcome back! I hope you learned something new in the previous lesson on Variables, data types, and comparison. Today, we are going to shift our focus to math. And if that makes you a bit nervous, don&amp;rsquo;t worry! We won&amp;rsquo;t be doing anything complicated today. You&amp;rsquo;ll just need the basics: addition, subtraction, exponents, and the like.
 The basic operations Since we&amp;rsquo;re talking about math in this lesson, we&amp;rsquo;re largely going to focus on numerical data types; that is, ints and floats.</description>
            <content type="html"><![CDATA[<p>Welcome back!  I hope you learned something new in the previous lesson on <a href="https://arobey1.github.io/python/variables_data_types/" title="Variables">Variables, data types, and comparison</a>.   Today, we are going to shift our focus to math.  And if that makes you a bit nervous, don&rsquo;t worry!  We won&rsquo;t be doing anything complicated today.  You&rsquo;ll just need the basics: addition, subtraction, exponents, and the like.</p>
<hr>
<h3 id="the-basic-operations">The basic operations</h3>
<p>Since we&rsquo;re talking about math in this lesson, we&rsquo;re largely going to focus on numerical data types; that is, ints and floats.  In the previous lesson, we learned all about how to create and compare these data types.  But as you&rsquo;ll see, there is so much more that we can do with Python variables.  In particular, in this lesson, we&rsquo;ll focus on answering the following question: What if we want to do <em>operations</em> on two or more values or variables?  For example, how do we add two variables in Python?</p>
<p>As we foreshadowed in the first lesson on <a href="https://arobey1.github.io/python/interacting_with_python/#user-supplied-input" title="Interacting with Python">interacting with Python</a>, adding two numbers works exactly as you&rsquo;d expect in Python.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>
<span style="color:#ae81ff">2</span>
</code></pre></div><p>Similarly, we can subtract, multiply, and divide numbers in the following way:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">5.0</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">3.1</span>   <span style="color:#75715e"># subtraction</span>
<span style="color:#ae81ff">1.9</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">7</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>       <span style="color:#75715e"># multiplication</span>
<span style="color:#ae81ff">21</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">20</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">8</span>      <span style="color:#75715e"># division</span>
<span style="color:#ae81ff">2.5</span>
</code></pre></div><p>Note that this works for both floats and ints.  Hopefully these operations seem relatively intuitive.  One more operation that you should know is exponentiation, i.e. raising one number ot the power of another number.  Exponentiation is performed by writing two asterisks.  Here are some examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">2</span>          <span style="color:#75715e"># 2 to the power of 2, i.e. 2 squared</span>
<span style="color:#ae81ff">4</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">25</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>       <span style="color:#75715e"># 25 to the power of 0.5, i.e. the square root of 25</span>
<span style="color:#ae81ff">5.0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">**</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>         <span style="color:#75715e"># 3 to the power ot -1, i.e. 1/3</span>
<span style="color:#ae81ff">0.3333333333333333</span>  
</code></pre></div><p>And that&rsquo;s basically it.  These five operations (and their symbols) &ndash; addition (+), subtraction (-), multiplication (*), division (\), and exponentiation (**) &ndash; will cover a large portion of the math you&rsquo;ll need to do in Python.  There&rsquo;s a lot more to say about these operations, but before we move on, I think a few exercises are in order.</p>
<hr>
<h4 id="exercise-1-using-the-basic-operations">Exercise 1 (Using the basic operations)</h4>
<p>Your first challenge for today is to write a script called moon_weight.py that calculates what you&rsquo;d weigh on the (capital M) Moon.  Objects on the Moon weight about 16.6% of what they&rsquo;d weigh on Earth, so if you weight 200 lbs on Earth, you&rsquo;d weight 33.2 lbs on the Moon.  Here&rsquo;s the kind of output I&rsquo;m looking for:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ moon_weight.py
This program calculates what you would weigh on the Moon.
Please enter your weight on the Earth.

Earth weight: <span style="color:#ae81ff">200</span>
Enter units: lbs
On the Moon, you would weigh 33.2 lbs
</code></pre></div><p>If you&rsquo;re feeling ambitious, why not add a few more planets (well, the Moon isn&rsquo;t really a planet I guess, so let&rsquo;s humor the inner poet in each of us and say &ldquo;celestial bodies&rdquo; instead)?  For example, if you were standing on the surface of the Sun (not that I necessarily recommend doing so), you&rsquo;d weigh 2707.2% of what you weight on Earth.  This <a href="http://www.seasky.org/solar-system/planet-weight-calculator.html">website</a> will give you the conversion rates for various other celestial bodies so that you can create output in a new script called celestial_bodies.py that work like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ celestial_bodies.py
This program calculates what you would weigh on the moon.
Please enter your weight on the Earth.

Earth weight: <span style="color:#ae81ff">200</span>
Enter units: lbs
On the Moon, you would weigh 33.2 lbs
On the Sun, you would weigh 5414.4 lbs
On Jupiter, you would weigh 472.8 lbs
</code></pre></div><p>Hint: In this exercise, you&rsquo;ll want to use Python&rsquo;s <a href="https://arobey1.github.io/python/interacting_with_python/#user-supplied-input">input function</a> as well as <a href="https://arobey1.github.io/python/variables_data_types/#printing-variables-with-f-strings">f-strings</a>.</p>
<hr>
<h3 id="interlude-a-break-from-math">Interlude: A break from math</h3>
<p>This interlude is just for fun.  It doesn&rsquo;t use any math, but it does loosely fit within the confines of the lesson plan today.  Over the course of this lesson, you may have been wondering: What happens when I use the mathematical operations on other kinds of data types, e.g., strings and bools?</p>
<p>In general, mathematical operations cannot always be applied to strings and bools.  For example, the following lines of code will throw errors:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;3&#34;</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;What is your favorite number&#34;</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">5</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">True</span> <span style="color:#f92672">/</span> <span style="color:#66d9ef">False</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;I&#39;ll see your bid, and I&#39;ll&#34;</span> <span style="color:#f92672">**</span> <span style="color:#e6db74">&#34;you 5 dollars&#34;</span>
</code></pre></div><p>However, there are a few cases where mathematical operations can be combined with strings and bools.  Here&rsquo;s an exhaustive list with examples:</p>
<p>Two (or more) strings can be added together:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#34;Can &#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;I &#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;be &#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;your &#34;</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;neighbor?&#34;</span>
Can I be your neighbor<span style="color:#960050;background-color:#1e0010">?</span>
</code></pre></div><p>Strings can be multiplied by integers:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;¯\_(ツ)_/¯&#39;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>
<span style="color:#960050;background-color:#1e0010">¯</span>\_(ツ)_<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">¯¯</span>\_(ツ)_<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">¯¯</span>\_(ツ)_<span style="color:#f92672">/</span><span style="color:#960050;background-color:#1e0010">¯</span> 
</code></pre></div><p>When any of the mathematical operations we&rsquo;ve seen are applied to bools, True is interpreted as 1 and False is interpreted as 0.  Thus:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">True</span> <span style="color:#f92672">+</span> <span style="color:#66d9ef">False</span>        <span style="color:#75715e"># interpreted as 1 + 0</span>
<span style="color:#ae81ff">1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">False</span> <span style="color:#f92672">/</span> <span style="color:#66d9ef">True</span>        <span style="color:#75715e"># interpreted as 0 / 1</span>
<span style="color:#ae81ff">0.0</span>
</code></pre></div><p>And that&rsquo;s it!  Now you know all there is to know about combining mathematical operations with strings and bools.</p>
<hr>
<h3 id="combining-multiple-operations">Combining multiple operations</h3>
<p>Almost all of the examples that we&rsquo;ve seen thus far have involved only a single operation.  However, as as you&rsquo;d expect, you can combine as many operations together as you&rsquo;d like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> num_strawberries <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> num_oranges <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> num_tomatoes <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> num_strawberries <span style="color:#f92672">+</span> num_oranges <span style="color:#f92672">+</span> num_tomatoes
<span style="color:#ae81ff">15</span>
</code></pre></div><p>To break up compound mathematical expressions like the one shown above, it&rsquo;s often helpful to insert parenthesis like so:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> (num_strawberries <span style="color:#f92672">+</span> num_oranges) <span style="color:#f92672">+</span> num_tomatoes
<span style="color:#ae81ff">15</span>
</code></pre></div><p>One reason we break up expressions like this with parenthesis is to make them more readible.  Above, the parenthesis are used to separate the addition of the number of fruits from the number of vegetables.</p>
<hr>
<h4 id="exercise-2-preview-of-the-order-of-operations">Exercise 2 (Preview of the order of operations)</h4>
<p>This being said, it&rsquo;s important to be careful when combining multiple mathematical operations using parentheses.  Let&rsquo;s illustrate some of the trouble that can arise when we&rsquo;re not careful with how we write compound mathematical expressions.</p>
<p>Below I&rsquo;ve written two expressions in the Python shell.  What do you think the output will be for each of these expressions?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">3</span>) <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> (<span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">4</span>)
</code></pre></div><p>After you&rsquo;ve thought a bit about it, try executing these commands.  Did your expectation align with the output you see?</p>
<hr>
<h3 id="the-order-of-operations">The order of operations</h3>
<p>As the above exercise illustrated, the order in which you write your mathematical operations matters in Python.  To govern which expressions should evaluated first, the order of operations in Python follows a specific set of guidelines known in technical jargon as the <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence">operation precedence rule</a>.  In essence, this precedence rule creates a hierarchy amongst the operations that we met earlier in this lesson.  And without further adieu, here&rsquo;s that hierarchy:</p>
<ol>
<li><strong>P</strong>arentheses</li>
<li><strong>E</strong>xponentiation</li>
<li><strong>M</strong>ultiplication</li>
<li><strong>D</strong>ivision</li>
<li><strong>A</strong>ddition</li>
<li><strong>S</strong>ubtraction</li>
</ol>
<p>Some people like to remember this via the abbreviation PEMDAS,  which I&rsquo;ve indicated by highlighting the first letter of each word in the hierarchy.</p>
<p>Here&rsquo;s how the hierarchy works.  Let&rsquo;s say I have a long, complicated mathematical expression, e.g.,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> ((<span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
</code></pre></div><p>How will Python execute this?  Well, according to the hierarchy, it will start the operation highest up on the list; in this case, that means the parentheses.  And importantly, Python will always start with the inner-most set of parentheses, meaning that <code>(3 + 2)</code> will be evaluated first.  Thus, we can imagine that <code>(3 + 2)</code> will be replaced by 5 in the above expression, leaving Python to consider the following simplified formula:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> (<span style="color:#ae81ff">5</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
</code></pre></div><p>Following this, Python will proceed to look at the remaining set of parenthesis around <code>5 * 10 / 2</code>.  As multiplication comes earlier in the hierarchy than division, Python will first calculate <code>5 * 10</code>, leaving us with</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> (<span style="color:#ae81ff">50</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
</code></pre></div><p>Next, Python will perform the divion in the parentheses, yielding</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">25</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
</code></pre></div><p>As there is only one operation left, Python can now easily return the correct answer: 5.0.  Thus, the expected output of our original command is as follows:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> ((<span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
<span style="color:#ae81ff">5.0</span>
</code></pre></div><p>And at a high level, that&rsquo;s all you need to know about the hierachy of operations in Python.  To get some more practice with this idea, try out the following exercise.</p>
<hr>
<h4 id="exercise-3-more-practice-with-the-basic-operations">Exercise 3 (More practice with the basic operations)</h4>
<p>It&rsquo;s cold today (December 24, 2022).  Like really cold.  In fact, <a href="https://www.poetryfoundation.org/poems/53219/mayakovsky">it may be the coldest day of the year</a>.  And the way I see it, this cold weather gives us the perfect opportunity for a fun little exercise.  Let&rsquo;s use Python to calculate the <em>windchill</em> given the temperature ($T$) in degrees Fahrenheit and wind speed ($W$) in miles per hour.  Windchill is calculated using the following formula:</p>
<p>$$ \text{windchill} = 35.74 + (0.6215 \cdot T) - 35.75 \cdot W^{0.16} + 0.4275 \cdot T \cdot W^{0.16}$$</p>
<p>(Please don&rsquo;t ask me where this comes from; I have simply no idea. . .  Ok fine, I looked it up.  Dear reader, if you&rsquo;re interested, feel free to <a href="https://en.wikipedia.org/wiki/Wind_chill#North_American_and_United_Kingdom_wind_chill_index">peruse</a> at your leisure.)</p>
<p>Your job is to write a script called calc_windchill.py that takes the temperature and wind speed as input, and then prints out the windchill.  Here&rsquo;s what I&rsquo;m looking for:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python calc_windchill.py
Enter the temperature <span style="color:#f92672">(</span>in degrees Fahrenheit<span style="color:#f92672">)</span>: <span style="color:#ae81ff">20</span>
Enter the wind speed <span style="color:#f92672">(</span>in miles per hour<span style="color:#f92672">)</span>: <span style="color:#ae81ff">10</span>
The windchill is: 6.21888526608 degrees Fahrenheit.
</code></pre></div><p>If you insist on doing this like the rest of the world, fell free to rewrite this script so that it calculates the windchill in degrees Celsius rather than Fahrenheit.</p>
<hr>
<h3 id="exercise-4-pretest-data-types-and-mathematical-operations">Exercise 4 (Pretest: data types and mathematical operations)</h3>
<p>Here&rsquo;s a question for you: What determines the data type that is returned from a mathematical operation in Python?  For instance, in the code snippet from the earlier section on <a href="#the-order-of-operations">the order of operations</a>, why did</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> ((<span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">*</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
</code></pre></div><p>return 5.0 &ndash; a float &ndash; instead of 5 &ndash; and int?  Before I fill you in, I want you to play around with this idea a little bit.  Try out the following commands, but before you hit enter, try to predict what the data type of the output will be.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2.0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">20</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">3.1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">0.0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">10</span> <span style="color:#f92672">-</span> <span style="color:#ae81ff">6</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">64</span> <span style="color:#f92672">**</span> <span style="color:#ae81ff">0.5</span>
</code></pre></div><p>Big props to you if you got all of these right!  If not, the next section will explain what&rsquo;s going on.</p>
<hr>
<h3 id="a-word-about-data-types">A word about data types</h3>
<p>When it comes to data types and mathematical expressions, here&rsquo;s a basic rule of thumb to keep in mind: For addition, subtraction, multiplication, and exponentiation, if you put two integers in, you&rsquo;ll get an integer out; if either or both of your inputs are floats, then you&rsquo;ll get a float as output.  Thus, for example, from the previous exercise, we get the following behavior</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">+</span> <span style="color:#ae81ff">2.0</span>
<span style="color:#ae81ff">5.0</span>
</code></pre></div><p>I.e., a float is returned because one of the inputs (namely, 2.0) to the addition operation is a float.</p>
<p>The odd man out here is division.  As opposed to the other operations, when you perform division in Python, you will always get a float as output.  Thus, even though the inputs to</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">25.0</span>
</code></pre></div><p>are both integers, Python returns the float 25.0.</p>
<hr>
<h3 id="converting-between-data-types">Converting between data types</h3>
<p>In some cases, you may not be satisfied with the data type that is returned by a mathematical expression.  For instance, perhaps you&rsquo;d like the expression</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>
<span style="color:#ae81ff">25.0</span>
</code></pre></div><p>to return an integer rather than a float.  Well, as you&rsquo;d imagine, Python has a solution for this.  As I mentioned very briefly in the lesson on <a href="https://arobey1.github.io/python/interacting_with_python/#user-supplied-input" title="Interacting with Python">interacting with Python</a>, we can turn a float into an int with the <code>int</code> function.  That is, we can force Python to return an int in the above example in the following way:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> int(<span style="color:#ae81ff">100</span> <span style="color:#f92672">/</span> <span style="color:#ae81ff">4</span>)
<span style="color:#ae81ff">25</span>
</code></pre></div><p>Note that if the argument to the int function has decimal places, the output will be rounded <em>down</em> to the nearest whole number.  Thus:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> int(<span style="color:#ae81ff">2.3</span>)
<span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> int(<span style="color:#ae81ff">9.999</span>)
<span style="color:#ae81ff">9</span>
</code></pre></div><p>There are similar functions for converting a data type to a float, string, and bool.  Here are some examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> float(<span style="color:#ae81ff">5</span>)
<span style="color:#ae81ff">5.0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> str(<span style="color:#ae81ff">5.6</span>)
<span style="color:#e6db74">&#39;5.6&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> bool(<span style="color:#ae81ff">1</span>)
<span style="color:#66d9ef">True</span>
</code></pre></div><p>Note that the <code>bool</code> function will only return 0 if the argument passed to it is zero.  For any other input, be it a string, integer, or float, as long as it isn&rsquo;t 0 or 0.0, <code>bool</code> will return True.</p>
<p>And that will just about do it for this lesson!  Stick around for a quick review and some additional exercises.</p>
<hr>
<h3 id="review">Review</h3>
<p>Let&rsquo;s summarize what we&rsquo;ve learned in this lesson.</p>
<ul>
<li>
<p><a href="#the-basic-operations">The basic operations</a>.  The following comprise the basic mathematical operations (and their symbols) in Python: addition (+),  subtraction (-), multiplication (*), division (\), and exponentiation (**).</p>
</li>
<li>
<p><a href="#exercise-1-using-the-basic-operations">Exercise 1 (Using the basic operations)</a>.</p>
</li>
<li>
<p><a href="#interlude-a-break-from-math">Interlude: A break from math</a>.  In some cases, mathematical operations can be applied to bools and strings.  In particular, strings can be added together, and strings can be multiplied by integers.  When using any of the operations we&rsquo;ve seen on bools, True is interpreted as 1 and False is interpreted as 0.</p>
</li>
<li>
<p><a href="#combining-multiple-operations">Combining multiple operations</a>.  Parentheses can be used to simplify mathematical expressions and to improve the readibility of your code.</p>
</li>
<li>
<p><a href="#exercise-2-preview-of-the-order-of-operations">Exercise 2 (Preview of the order of operations)</a>.  Care needs to be taken when using parentheses in mathematical operations, as they can change the outputs of these expressions.</p>
</li>
<li>
<p><a href="#the-order-of-operations">The order of operations</a>.  The order in which Python executes different mathemtical operations follows a hierarchy called the operations precedence rule.  The hierarchy follows the abbreviation PEMDAS, which stands for <strong>p</strong>arentheses, <strong>e</strong>exponentiation, <strong>m</strong>ultiplication, <strong>d</strong>ivision, <strong>a</strong>ddition, and finally, <strong>s</strong>ubtraction.  Operations higher up in the hierarchy will be executed before operations lower in the hierarchy.</p>
</li>
<li>
<p><a href="#exercise-3-more-practice-with-the-basic-operations">Exercise 3 (More practice with the basic operations)</a>.</p>
</li>
<li>
<p><a href="#exercise-4-pretest-data-types-and-mathematical-operations">Exercise 4 (Pretest: data types and mathematical operations)</a></p>
</li>
<li>
<p><a href="#a-word-about-data-types">A word about data types</a>.  When you perform addition, subtraction, multiplication, or division in Python, there are two possible cases: (a) if both of your inputs are integers, then an integer will be returned; (b) if either or both of your inputs are floats, then a float will be returned.  And as for division, regardless of the data types of your input, a float will always be returned.</p>
</li>
<li>
<p><a href="#converting-between-data-types">Converting between data types</a>.  The functions <code>int</code>, <code>float</code>, <code>str</code>, and <code>bool</code> can be used to convert between data types.</p>
</li>
</ul>
<hr>
<h3 id="additional-exercises">Additional exercises</h3>
<h4 id="exercise-5-more-practice-with-operations">Exercise 5 (More practice with operations)</h4>
<p>Remember those formulas that you learned in primary school about the volume and surface area of different objects?  I bet you didn&rsquo;t think that you&rsquo;d ever see those again.  Well, today&rsquo;s the day that they come back to haunt you.  Recall that the volume $V$ and surface area $A$ of a sphere (in three dimensions) is</p>
<p>$$V = \frac{4}{3}\pi R^3 \quad\text{and}\quad A = 4 \pi R^2$$</p>
<p>where $R$ is the radius of the sphere and $\pi=3.1415926\dots$ is everyone&rsquo;s favorite mathematical constant.  Your job is to write a script called sphere.py that will take the radius of a sphere as input and return the volume and surface area of that sphere.  Here&rsquo;s some sample output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python shell.py
Enter a radius: <span style="color:#ae81ff">10</span>
Enter your approximation of pi: 3.1415926

Your sphere has a surface area of 1256.63704 units.
Your sphere has a volume of 4188.790133333333 units.
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Variables, data types, and comparison</title>
            <link>https://arobey1.github.io/python/variables_data_types/</link>
            <pubDate>Wed, 21 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://arobey1.github.io/python/variables_data_types/</guid>
            <description>Variables and data types Perhaps the most fundamental of all Python fundamentals is the concept of a variable. The first thing you need to know about variables is what they&amp;rsquo;re used for:
 A variable is a container for saving data.
 A theme in this set of notes will be illustrating different concepts by way of examples. And I can think of no better way to introduce variables than with the following (not-so-randomly-chosen) use case.</description>
            <content type="html"><![CDATA[<h3 id="variables-and-data-types">Variables and data types</h3>
<p>Perhaps the most fundamental of all Python fundamentals is the concept of a <strong>variable</strong>.  The first thing you need to know about variables is what they&rsquo;re used for:</p>
<blockquote>
<p>A variable is a container for saving data.</p>
</blockquote>
<p>A theme in this set of notes will be illustrating different concepts by way of examples.  And I can think of no better way to introduce variables than with the following (not-so-randomly-chosen) use case.</p>
<p>If you&rsquo;re like me, you have a hard time remembering important dates like birthdays.  To rectify this, we can store birthdays as variables.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> importantBirthday <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;July 31&#39;</span>
</code></pre></div><p>Now, if I want to remember this important birthday, I can do the following</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> print(importantBirthday)
July <span style="color:#ae81ff">31</span>
</code></pre></div><p>and as you can see, Python remembers the birthday for me!  Note that when we define a variable, we assign its value by using the equals sign (=).</p>
<p>Variables come in all shapes and sizes.  Each variable you assign in your future Python programs will have what&rsquo;s called a <strong>data type</strong>.</p>
<blockquote>
<p>A data type specifies what kind of data you&rsquo;re saving in your variable.</p>
</blockquote>
<p>The data type of the  <code>importantBirthday</code> variable is called a <strong>string</strong>, since it&rsquo;s a sequence of characters in quotes.  Note that strings can also be defined using double quotes, i.e., we could just as well have defined <code>importantBirthday = &quot;July 31&quot;</code>.</p>
<p>Two other important data types are <strong>integers</strong> and <strong>floats</strong>, both of which are kinds of numbers.  Here are some examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> numCats <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>          <span style="color:#75715e"># this is an integer</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> digitsOfPi <span style="color:#f92672">=</span> <span style="color:#ae81ff">3.14</span>    <span style="color:#75715e"># this is a float</span>
</code></pre></div><p>An integer is a number <em>without</em> decimal points; anything in the range . . ., -2, -1, 0, 1, 2, 3, . . . counts as an integer.  A float (short for &ldquo;floating-point&rdquo;) is a number <em>with</em> decimal points, e.g., 3.1415 or 2.71828.  In a future lesson on <a href="https://arobey1.github.io/python/math_operations/" title="Math Operations">Mathematical operations</a>, we&rsquo;ll learn about how integer and float variables can be used to do mathematical calculations in Python.</p>
<p>Strings, integers, and floats are three of the most common data types in Python.  In this set of notes, we&rsquo;ll meet plenty of other data types, but for now, let&rsquo;s review these three main characters.</p>
<hr>
<h4 id="exercise-1-review-of-data-types">Exercise 1 (Review of data types)</h4>
<p>What are the data types of the following variables?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> a <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1.242</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> b <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Claude Debussy&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> c <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;2.30&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> d <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">600</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> e <span style="color:#f92672">=</span> <span style="color:#ae81ff">5.0</span>
</code></pre></div><p>Rather than giving you the answers to this exercise, I&rsquo;m going to give you the tool you need to check your own work.  In Python, if you want to check the data type of a variable, you can use the <strong>type</strong> keyword.  Returning to our earlier examples, the type keyword tells us the following:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> type(importantBirthday)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">str</span><span style="color:#e6db74">&#39;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> type(numCats)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">int</span><span style="color:#e6db74">&#39;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> type(digitsOfPi)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">float</span><span style="color:#e6db74">&#39;&gt;</span>
</code></pre></div><p>Don&rsquo;t worry about the word &ldquo;class&rdquo; in the output; we&rsquo;ll get to that in a future lesson.  The key thing here is that the type keyword tell us that <code>importantBirthday</code> is a string (&ldquo;str&rdquo; for short), <code>numCats</code> is an integer (or an &ldquo;int&rdquo;), and <code>digitsOfPi</code> is a float.</p>
<p>Now you can check your work for Exercise 1 using the type keyword.</p>
<hr>
<h3 id="booleans">Booleans</h3>
<p>One more data type worth mentioning at this early stage is the <strong>bool</strong> type.  Bool is short for Boolean, which eponymously refers to the nineteenth century mathematician <a href="https://en.wikipedia.org/wiki/George_Boole">George Boole</a>.  Unlike strings, integers, and floats, bool variables can take on only two values: True or False (the capitalization here is important; Python will not interpret &ldquo;true&rdquo; or &ldquo;false&rdquo; as a bool).  For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> type(<span style="color:#66d9ef">True</span>)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">bool</span><span style="color:#e6db74">&#39;&gt;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> type(<span style="color:#66d9ef">False</span>)
<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">bool</span><span style="color:#e6db74">&#39;&gt;</span>
</code></pre></div><p>Bool variables are quite useful when defining logical expressions, as we&rsquo;ll see very soon.</p>
<hr>
<h4 id="exercise-2-variable-reassignment">Exercise 2 (Variable reassignment)</h4>
<p>When you assign a value to a variable, the data type of that variable takes on the data type of the value.  For example, if I were to write</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> mySentence <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;The knights who say ni!&#39;</span>
</code></pre></div><p>then the data type of <code>mySentence</code> would be a string.  But what happens when I <em>reassign</em> the value of the <code>mySentence</code> variable?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> mySentence <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;The knights who say ni!&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> mySentence <span style="color:#f92672">=</span> <span style="color:#ae81ff">23</span>
</code></pre></div><p>As you&rsquo;d expect, <code>type('The knights who say ni!')</code> evaluates to &lt;class &lsquo;str&rsquo;&gt; whereas <code>type(23)</code> evaluates to &lt;class &lsquo;int&rsquo;&gt;.  Take a second to check the type of <code>mySentence</code> in your Python interpreter.  Does it align with you expectation?</p>
<p>The lesson here is that the data type of a Python variable can change when its value is reassigned.  This is one feature that makes Python especially easy to work with for beginners, because this ability to seamlessly change the data type of a variable doesn&rsquo;t exist in all programming languages (e.g., those that are <a href="https://en.wikipedia.org/wiki/Type_system#Static_type_checking">statically typed</a> like Java or C++).</p>
<hr>
<h3 id="printing-variables-with-f-strings">Printing variables with f-strings</h3>
<p>In the previous lesson on <a href="https://arobey1.github.io/python/interacting_with_python/#print-statements" title="Interacting with Python">interacting with Python</a>, we learned about Python&rsquo;s print function.  Based on that lesson, you should have a strong intuition about what the output of the following script &ndash; let&rsquo;s call it dessert.py &ndash; will be.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">myFavoriteDessert <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;What is your favorite dessert? &#34;</span>)
print(myFavoriteDessert)
</code></pre></div><p>This script just prints your favorite dessert to the console.  However, it&rsquo;s plausible that you would like to add more information here.  For example, you may want to print &ldquo;Your favorite desert is: &quot; before printing the value of <code>myFavoriteDessert</code>.</p>
<p>How should we do this?  It turns out that there are many methods, but for now, I&rsquo;m just going to share my favorite method and leave the rest to a future lesson.  This method uses what&rsquo;s known as an <strong>f-string</strong> (or, in jargon, <a href="https://realpython.com/python-f-strings/#f-strings-a-new-and-improved-way-to-format-strings-in-python">formatted string literals</a>), for reasons that will become obvious shortly.  Here&rsquo;s what you should remember about f-strings:</p>
<blockquote>
<p>f-strings allow you to insert variables directly into strings.</p>
</blockquote>
<p>To see an f-string in action, consider the following new version dessert.py:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">myFavoriteDessert <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;What is your favorite dessert? &#34;</span>)
print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;Your favorite dessert is: </span><span style="color:#e6db74">{</span>myFavoriteDessert<span style="color:#e6db74">}</span><span style="color:#e6db74">.&#34;</span>)
</code></pre></div><p>Let&rsquo;s compare the two versions of our script.  In the second line, we added an &ldquo;f&rdquo; before the quotation mark, we added text saying &ldquo;Your favorite dessert is: &ldquo;, and after that, we used curly braces to wrap our variable.  Here&rsquo;s the output:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python dessert.py
What is your favorite dessert? cupcakes
Your favorite dessert is: cupcakes.
</code></pre></div><p>Note that if you forget that leading &ldquo;f&rdquo; before the first quotation mark, the string will not print correctly.  You can use f-strings with all of the data types we&rsquo;ve met so far.  In the following exercise, you&rsquo;ll see a few more examples of how f-strings can be used.</p>
<hr>
<h4 id="exercise-3-f-strings-in-action">Exercise 3 (f-strings in action)</h4>
<p>Let&rsquo;s have some more fun with f-strings.  Your job: Write a program that prompts the user for input to a <a href="https://www.madlibs.com/history/">madlib</a>.  Never heard of madlibs before?  Allow me to explain.  When doing a madlib, there are two players: a questioner and a responder.  The questioner either obtains or thinks up a story and removes several words from that story without showing the story or the removed words to the responder.  At each location where there is a missing words, the questioner asks the responder to supply a word.  Usually the questioner gives clarification about what part of speech the responder should supply.  And as the responder supplies words, the questioner fills in the blanks, resulting in an often wacky, off-color, or sweet story depending on the chosen words.</p>
<p>In line with tradition, we&rsquo;re going to reproduce the classic 1982 madlib called &ldquo;The Magic Computers.&rdquo;  Your program should look something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python madlib.py
Enter a noun: bird
Enter a plural noun: trees
Enter a verb <span style="color:#f92672">(</span>present tense<span style="color:#f92672">)</span>: salt
Enter a verb <span style="color:#f92672">(</span>present tense<span style="color:#f92672">)</span>: sail
Enter a part of the body <span style="color:#f92672">(</span>plural<span style="color:#f92672">)</span>: toes
Enter an adjective: floral
Enter a plural noun: wine glasses
Enter an adjective: sparkley

Today, every student has a computer small enough to fit into their 
&lt;bird&gt;.  They can easily solve math problems by simply pushing the 
computer<span style="color:#960050;background-color:#1e0010">&#39;</span>s little &lt;trees&gt;.  Computers can add, multiply, divide, 
and salt.  They can also &lt;sail&gt; better than a human.  Some 
computers are &lt;toes&gt;.  Others have a/an &lt;floral&gt; screen that shows 
all kinds of &lt;wine glasses&gt; and &lt;sparkly&gt; figures.
</code></pre></div><hr>
<h3 id="naming-variables">Naming variables</h3>
<p>Before moving on to more advanced topics, let&rsquo;s talk a little bit about how we&rsquo;re allowed to name variables.  In Python, variable names can be arbitrarily long, and they can contain numbers, letters, and the underscore (_) symbol.  For example, all of the following are valid variable names:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> myFavoriteNumberIs23 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;no, it&#39;s actually 24. . .&#34;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> look_at_all_these_underscores <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> HELLO_WORLD <span style="color:#f92672">=</span> <span style="color:#ae81ff">100</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> hello_world <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> __ahhhhhhh <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.12345</span>
</code></pre></div><p>There are a few caveats to naming variables.</p>
<ul>
<li><strong>Leading numbers.</strong>  A variable can&rsquo;t start with a number, so <code>8IsCool</code> would not be a valid variable name.</li>
<li><strong>Spaces.</strong>  Variable names also cannot contain spaces, so <code>X AE A-Xii</code> (the name of Grimes and Elon Musk&rsquo;s first child together) is an invalid variable name.</li>
<li><strong>Capitalization.</strong>  Capitalization also matters when defining variables.  In the above code snippet, we defined <code>HELLO_WORLD</code> and <code>hello_world</code> as two separate variables.  You can check in your console that they stored different values.</li>
<li><strong>Other symbols.</strong>  Variable names cannot contain symbols other than the underscore, so something like <code>IWantAllThat$$$</code> wouldn&rsquo;t work.</li>
</ul>
<p>Don&rsquo;t worry about memorizing these rules.  As you write more Python, these rules will become second nature to you.  And when you forget these rules, Python has a helpful mechanism to get you back on track. . .</p>
<hr>
<h3 id="error-messages">Error messages</h3>
<p>When you use an invalid variable name, Python will always let you know by raising what&rsquo;s known as a <strong>SyntaxError</strong>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> IWantAllThat<span style="color:#960050;background-color:#1e0010">$$$</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>
    IWantAllThat<span style="color:#960050;background-color:#1e0010">$$$</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
                <span style="color:#f92672">^</span>
<span style="color:#a6e22e">SyntaxError</span>: invalid syntax
</code></pre></div><p>Notice that the error message points toward the first dollar sign, meaning that this is the piece of the variable name that caused the error.  Why does it identify the first dollar sign as causing the error instead of the last?  In short, when Python interprets your code, it scans each line from left to right, so the leftmost incorrect character in your variable will always be the one identified by the error.</p>
<p>In Python, there are many other kinds of errors.  Sometimes, when your code throws an error message, it&rsquo;s easy to get discouraged.  But getting an error message doesn&rsquo;t mean that you&rsquo;re a bad programmer!  In fact, messages can be extremely helpful when debugging your code.  So when it comes to error messages, here&rsquo;s the mantra:</p>
<blockquote>
<p>Error messages are designed to help you &ndash; the programmer &ndash; figure out what went wrong in your code.</p>
</blockquote>
<p>You should embrace error messages, especially those that give you specific feedback about what went wrong.</p>
<hr>
<h4 id="exercise-4-variable-names">Exercise 4 (Variable names)</h4>
<p>Which of the following are valid variable names?  And if a variable name is invalid, what will the SyntaxError point to when the error is thrown?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> TheDigitsOfPiAre3<span style="color:#ae81ff">.14</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> M3rryChristma5 <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ho ho ho&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> Eight<span style="color:#f92672">-</span>five <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> Wh<span style="color:#a6e22e">@tIsMyN@me</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Jane Eyre&#39;</span>
</code></pre></div><p>Try it out in your terminal.</p>
<hr>
<h3 id="protected-keywords">Protected keywords</h3>
<p>There&rsquo;s one more caveat worth mentioning here, and I&rsquo;ll illustrate it by way of an example.  Let&rsquo;s say you&rsquo;re a busy teacher, and you want to keep track of how many classes you&rsquo;re teaching.  You might do this by defining a variable called &ldquo;class.&rdquo;  Let&rsquo;s see what happens when we try to do that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">= 5</span>
  File <span style="color:#e6db74">&#34;&lt;stdin&gt;&#34;</span>, line <span style="color:#ae81ff">1</span>
    <span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">= 5</span>
          <span style="color:#f92672">^</span>
<span style="color:#a6e22e">SyntaxError</span>: invalid syntax
</code></pre></div><p>Why doesn&rsquo;t this work?  According to the rules we listed above, &ldquo;class&rdquo; should be a valid variable name, shouldn&rsquo;t it?</p>
<p>It turns out that Python has a set of so-called &ldquo;protected&rdquo; keywords which cannot be used as variable names.  As of latest version of Python (Python version 3.10), there are 35 keywords in Python.  Here&rsquo;s the full list:</p>
<p><img src="../../assets/python-keywords.png" alt="Python-keywords"></p>
<p>After scanning this list, you may have noticed that we&rsquo;ve already met three of these keywords!  In addition to &ldquo;class&rdquo; in the above example, we&rsquo;ve also seen &ldquo;True&rdquo; and &ldquo;False&rdquo; when <a href="#booleans">Boolean data types</a> were introduced.  If you continue reading these notes, you&rsquo;ll encounter many of these keywords.</p>
<hr>
<h3 id="readibility">Readibility</h3>
<p>How you choose your variable names may seem like a small detail, but in my view, this is one of the most important parts of writing a program.  If you take one thing away from this lesson, let is be this:</p>
<blockquote>
<p>As a programmer, you will read ten times more code than you will write.</p>
</blockquote>
<p>And ten is likely an underestimate here.  It&rsquo;s crucial that your code is readible, and readibility is heavily tied to how you name your variables.  For example, if I wanted to create a variable that counted the number of cats I have, which variable do you think is more readible?  This:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> n <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</code></pre></div><p>or this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">numCats <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</code></pre></div><p>In other words, if someone else had to read your code, how quickly would they be able to figure out what&rsquo;s going on in your program?  As a programmer, you should always try to focus on writing code such that the next person who interacts with your code can get up to speed as fast as possible.</p>
<hr>
<h3 id="variable-comparison">Variable comparison</h3>
<p>Now that we&rsquo;ve learned about Python variables, it&rsquo;s time to think about how we can compare two variables.  To illustrate this, let&rsquo;s start by defining a few variables that we can play around with.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> numBananas <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numOranges <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numGrapes <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numStrawberries <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</code></pre></div><p>(Yes, I did just finished cutting up a bowl of fruit.)  One important task in Python is to check whether two variables are equal.  To do so, we use two equals signs, e.g.,</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> numOranges <span style="color:#f92672">==</span> numGrapes
<span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numGrapes <span style="color:#f92672">==</span> numStrawberries
<span style="color:#66d9ef">False</span>
</code></pre></div><p>As you can see, checking whether two variables are equal returns a Boolean variable: True if the variables are equal, and False otherwise.  A common mistake in Python is to confuse variable assignment, which uses a single equal sign (=), with variable comparison, which uses two equal signs (==), so it&rsquo;s important to take care when bashing your little finger on that equals sign key!</p>
<p>You can also check whether two variables are <em>not</em> equal to one another using an exclamation point followed by an equals sign.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> numOranges <span style="color:#f92672">!=</span> numBananas
<span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numOranges <span style="color:#f92672">!=</span> numGrapes
<span style="color:#66d9ef">False</span>
</code></pre></div><p>Aside from checking whether two variables are equal or not, we can also check whether one variable is larger or small than another.  To do so, we use the &gt; key to denote &ldquo;is larger than&rdquo; and the &lt; key to denote &ldquo;is smaller than.&rdquo;  Take a look at the following examples:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> numOranges <span style="color:#f92672">&gt;</span> numStrawberries
<span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numBananas <span style="color:#f92672">&lt;</span> numGrapes
<span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> numGrapes <span style="color:#f92672">&gt;</span> numStrawberries
<span style="color:#66d9ef">False</span>
</code></pre></div><p>Similarly, you can use &gt;= to check whether one variable is larger than equal to another variable; we can write &lt;= to check whether a variable is less than or equal to another variable.</p>
<hr>
<h4 id="exercise-5-comparing-variables">Exercise 5 (Comparing variables)</h4>
<p>So far, we&rsquo;ve shown how you can compare two integer variables.  However, in Python, you can compare other kinds of data types.  What do you think the outcomes of these comparisons will be?</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">True</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">False</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">3</span> <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">2.15</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;Rachel&#39;</span> <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;Ross&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">4.2424</span> <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">4.2424</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">4.2424</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">4.2424</span>
</code></pre></div><hr>
<h3 id="comparing-variables-with-different-data-types">Comparing variables with different data types</h3>
<p>Somewhat unintuitively, it is sometimes &ndash; but not always &ndash; possible to compare two variables that have different data types.  For example, in some cases, it can be useful to think of the number 1 as denoting &ldquo;true&rdquo; and the number 0 as denoting &ldquo;false.&rdquo;  This convention arises in various fields such as <a href="https://en.wikipedia.org/wiki/Logic_level">circuit design</a>.  To meet this convention, Python allows you to compare bools to integers.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">True</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#66d9ef">False</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>
<span style="color:#66d9ef">True</span>
</code></pre></div><p>Here are some more examples which compare variables of different data types.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1.0</span>
<span style="color:#66d9ef">True</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&gt;</span> <span style="color:#e6db74">&#39;b&#39;</span>
<span style="color:#66d9ef">False</span>
</code></pre></div><p>In these notes, we won&rsquo;t provide an exhaustive list of what you can and cannot compare.  This is your time to explore!  What happens when you compare a string to an integer?  What if you compare a Boolean to a number other than 0 or 1?  Try it out!</p>
<hr>
<h3 id="review">Review</h3>
<p>Let&rsquo;s summarize what we&rsquo;ve learned in this lesson.</p>
<ul>
<li>
<p><a href="#variables-and-data-types">Variables and data types</a>. A <strong>variable</strong> is a container for storing data, and variables are defined with the equals sign.  Every Python variable has a <strong>data type</strong>.  In this section, we met three data types: <strong>strings</strong> are sequences of characters in quotes, <strong>integers</strong> are numbers <em>without</em> decimals, and <strong>floats</strong> are numbers <em>with</em> decimals.</p>
</li>
<li>
<p><a href="#exercise-1-review-of-data-types">Exercise 1 (Review of data types)</a>.  The <strong>type</strong> keyword allows you check the data type of a variable.</p>
</li>
<li>
<p><a href="#booleans">Boolean data types</a>.  Boolean or <strong>bool</strong> variables can take on one of two (logical) values: True or False.</p>
</li>
<li>
<p><a href="#exercise-2-variable-reassignment">Exercise 2 (Variable reassignment)</a>.</p>
</li>
<li>
<p><a href="#printing-variables-with-f-strings">Printing variables with f-strings</a>.  <strong>f-strings</strong> allow you to insert variables into strings.</p>
</li>
<li>
<p><a href="#exercise-3-f-strings-in-action">Exercise 3 (f-strings in action)</a>.</p>
</li>
<li>
<p><a href="#naming-variables">Naming variables</a>.  Python has strict conventions on how variables can be named.  Variable names can be artbirarily long, and can contain numbers, letters, and underscores.  Variable names cannot start with numbers and they cannot include spaces or symbols other than the underscore.</p>
</li>
<li>
<p><a href="#error-messages">Error messages</a>.  Error messages let you know when your code fails.  <strong>SyntaxError</strong>s tell us when a variable has an invalid name.</p>
</li>
<li>
<p><a href="#exercise-4-variable-names">Exercise 4 (Variable names)</a>.</p>
</li>
<li>
<p><a href="#protected-keywords">Protected keywords</a>.  A small set of &ldquo;protected&rdquo; words cannot be used as variable names in Python, including &ldquo;True&rdquo;, &ldquo;False&rdquo;, and &ldquo;class.&rdquo;</p>
</li>
<li>
<p><a href="#readibility">Readibility</a>.  As a programmer, you&rsquo;ll read <em>at least</em> ten times as much code as you&rsquo;ll write.  You should always strive to write code that is easy for others to read.</p>
</li>
<li>
<p><a href="#variable-comparison">Variable comparison</a>.  You can compare two variables in Python in various ways: == and != are used to check whether two variables are equal or not equal respectively, &gt; and &lt; are used to check strict inequalities, and &gt;= and &lt;= are used to check non-strict inequalities (e.g., greater than or equal to).</p>
</li>
<li>
<p><a href="#exercise-5-comparing-variables">Exercise 5 (Comparing variables)</a>.</p>
</li>
<li>
<p><a href="#comparing-variables-with-different-data-types">Comparing variables with different data types</a>.  In some cases, you can compare variables with contrasting data types, e.g., <code>True == 1</code> evaluates to True.</p>
</li>
</ul>
<hr>
<h3 id="additional-exercises">Additional exercises</h3>
<h4 id="exercise-6-true-or-false">Exercise 6 (True or false)</h4>
<ol>
<li><code>_my_favorite_food_is_popcorn_</code> is a valid variable name.</li>
<li><code>'abc' &lt; 'd'</code> evaluates to True.</li>
<li>The data type of 3.000000 is int.</li>
<li><code>False &gt;= True</code> evaluates to False.</li>
<li>Defining strings with double quotes instead of single quotes will throw an error.</li>
<li><code>type('5.555')</code> returns float.</li>
<li>When I reassign the value of a variable, it&rsquo;s data type will always change.</li>
</ol>
<h4 id="exercise-7-caveats">Exercise 7 (Caveats)</h4>
<ol>
<li>How many values can a Boolean variable take on?</li>
<li>Which symbols are you allowed to use when naming a variable in Python?</li>
<li>Do &lt;= and &gt;= check for strict or non-strict inequalities?</li>
<li>What is the maximum length for a variable name?</li>
</ol>
<hr>
<p>Congratulations!  You made it through your first full lesson in Python.  Things will only get more exciting from here, so make sure to check out the next note in this series.</p>
]]></content>
        </item>
        
        <item>
            <title>Interacting with Python</title>
            <link>https://arobey1.github.io/python/interacting_with_python/</link>
            <pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://arobey1.github.io/python/interacting_with_python/</guid>
            <description>Interacting with Python There are two main ways of interacting with Python: with a shell and with a script. Here&amp;rsquo;s a brief primer on how shells and scripts work and when you should use them.
 Python shell Perhaps the easiest way to start interacting with Python is through what&amp;rsquo;s known as a shell. Never heard of a shell before? No worries! Here&amp;rsquo;s a quick definition:
 A shell is an interpreter that can execute Python programs and simple Python commands.</description>
            <content type="html"><![CDATA[<h3 id="interacting-with-python">Interacting with Python</h3>
<p>There are two main ways of interacting with Python: with a shell and with a script.  Here&rsquo;s a brief primer on how shells and scripts work and when you should use them.</p>
<hr>
<h4 id="python-shell">Python shell</h4>
<p>Perhaps the easiest way to start interacting with Python is through what&rsquo;s known as a <strong>shell</strong>.  Never heard of a shell before?  No worries!  Here&rsquo;s a quick definition:</p>
<blockquote>
<p>A shell is an interpreter that can execute Python programs and simple Python commands.</p>
</blockquote>
<p>To open a shell, open a terminal (not sure what this is? see <a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-the-linux-terminal">this link</a>), type the word &ldquo;python,&rdquo; and hit enter.  You should see something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python
Python 3.9.6 <span style="color:#f92672">(</span>default, Jun <span style="color:#ae81ff">29</span> 2021, 06:20:32<span style="color:#f92672">)</span> 
<span style="color:#f92672">[</span>Clang 12.0.0 <span style="color:#f92672">(</span>clang-1200.0.32.29<span style="color:#f92672">)]</span> on darwin
Type <span style="color:#e6db74">&#34;help&#34;</span>, <span style="color:#e6db74">&#34;copyright&#34;</span>, <span style="color:#e6db74">&#34;credits&#34;</span> or <span style="color:#e6db74">&#34;license&#34;</span> <span style="color:#66d9ef">for</span> more information.
&gt;&gt;&gt;
</code></pre></div><p>The three sideways carrots that you see at the bottom of the output are where you can execute Python commands.  Let&rsquo;s try it out!  It&rsquo;s <a href="https://en.wikipedia.org/wiki/%22Hello,_World!%22_program">traditional</a> to print the words &ldquo;Hello world!&rdquo; in your console when you first start learning a programming language.  And who are we to break with tradition?  In your console, type the following statement:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#34;Hello world!&#34;</span>)
</code></pre></div><p>Now hit enter (or return, depending on your keyboard)!  You should see the worlds &ldquo;Hello world!&rdquo; printed out in the console, i.e.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#34;Hello world!&#34;</span>)
<span style="color:#e6db74">&#39;Hello world!&#39;</span>
</code></pre></div><p>To exit the Python shell, you can type <code>exit()</code> and hit enter, or use Ctrl-D.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> exit()
</code></pre></div><p>Congratulations!  You just executed your first Python expressions.  Here&rsquo;s to many more.</p>
<hr>
<h4 id="python-scripts">Python scripts</h4>
<p>The second way to interact with a Python program is through what&rsquo;s known as a <strong>script</strong>.</p>
<blockquote>
<p>A Python script is a file containing Python code.</p>
</blockquote>
<p>The difference between a shell and a script is as follows.  In a shell, you can execute expressions one by one by typing typing them into the console and hitting enter.  In a script, you can write one or multiple expressions in the file, and then you can execute the code by running it in your console.</p>
<p>For example, try creating a file called my_first_program.py.  How will your computer know that this is a Python file?</p>
<blockquote>
<p>All Python programs end with &ldquo;.py&rdquo;.  This tells your operating system that the code your running is written in Python.</p>
</blockquote>
<p>So now whenever you see a file ending in .py, you can impress your friends, colleagues, or partner by telling them that you&rsquo;re sure this is a Python script without needing to open the file!</p>
<p>Next, add the following contents to my_first_program.py:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">print(<span style="color:#e6db74">&#34;Hello world!&#34;</span>)
</code></pre></div><p>Now to run your program, open your terminal, and from the same directory as my_first_program.py, run the following command:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python my_first_program.py
</code></pre></div><p>And as before, you should see the following output.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python my_first_program.py
<span style="color:#e6db74">&#39;Hello world!&#39;</span>
</code></pre></div><p>Now that you know what shells and scripts are, you might be wondering when you should use one over the other.  Well, I&rsquo;m glad you asked!</p>
<hr>
<h3 id="when-to-use-the-shell-and-when-to-use-scripts">When to use the shell and when to use scripts</h3>
<p>All of the code in this set of notes can be executed in a shell or in a script.  That being said, for longer expressions or programs, it tends to be easier to use scripts.  Why?  There&rsquo;s a few reasons:</p>
<ul>
<li>
<p><strong>Organization.</strong>  Scripts allow you to easily execute multiple expressions at once, whereas in the shell, expressions need to be executed one by one.  When you have a long program, it becomes much easier to organize your code into interpretable blocks when your statements are broken into one or several scripts.</p>
</li>
<li>
<p><strong>Program state.</strong>  Every time you exit and restart the shell, you lose all of the code that you&rsquo;ve written.  In scripts, you can save your code by saving the file, and then rerun it whenever you want.</p>
</li>
</ul>
<hr>
<h3 id="print-statements">Print statements</h3>
<p>Let&rsquo;s talk a little bit more about the commands you executed above.  In both the shell and script programs that we wrote, we ran the command <code>print(&quot;Hello world!)</code>.  This command consists of two parts: a function called <code>print</code> and an argument that we passed to that print statement; namely, &ldquo;Hello world!&rdquo;.</p>
<blockquote>
<p>The <code>print</code> function allows a user to print statements to the console.</p>
</blockquote>
<p>You&rsquo;ll be using the print statement <em>a lot</em> when writing Python code, so to get you more familiar with it, let&rsquo;s look at a few examples in the Python shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#34;I am using the print function&#34;</span>)
<span style="color:#e6db74">&#39;I am using the print function&#39;</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#ae81ff">3.1415926</span>)
<span style="color:#ae81ff">3.1415926</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(<span style="color:#e6db74">&#34;23 is a prime number&#34;</span>)
<span style="color:#e6db74">&#39;23 is a prime number&#39;</span>
</code></pre></div><p>Let&rsquo;s take what you&rsquo;ve learned about printing and apply it in the following exercise.</p>
<hr>
<h4 id="exercise-1-from-the-shell-to-a-script">Exercise 1 (From the shell to a script)</h4>
<p>The examples we just went through were all executed in a Python shell.  My question for you: Can you write this program as a script and produce the same output?  On your computer, create a script called print_examples.py and write a Python script that prints the same output.  That is, you should see the following in your terminal:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ print_examples.py
<span style="color:#e6db74">&#39;I am using the print function&#39;</span>
3.1415926
<span style="color:#e6db74">&#39;23 is a prime number&#39;</span>
</code></pre></div><p>Think you&rsquo;ve got the hang of printing?  Let&rsquo;s kick things up a notch in the next exercise.</p>
<hr>
<h4 id="exercise-2-your-first-python-program">Exercise 2 (Your first Python program)</h4>
<p>These are early days.  You&rsquo;re just getting started on your Python journey.  But guess what!  You&rsquo;re ready to write your first original Python program.  Yes, really!  What will you be doing?  I want you to write a program called print_my_cow.py that prints the following output to the terminal.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python print_my_cow.py
^__^
<span style="color:#f92672">(</span>oo<span style="color:#f92672">)</span><span style="color:#ae81ff">\_</span>______
<span style="color:#f92672">(</span>__<span style="color:#f92672">)</span><span style="color:#ae81ff">\ </span>      <span style="color:#f92672">)</span><span style="color:#ae81ff">\/\
</span><span style="color:#ae81ff"></span>    <span style="color:#f92672">||</span>----w |
    <span style="color:#f92672">||</span>     <span style="color:#f92672">||</span>
</code></pre></div><p>If that&rsquo;s too easy for you, why not spruce things up a little bit?  Maybe your cow is a thoughtful cow, and you&rsquo;d like to show her thinking up a funny (albeit heartfelt) witticism.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python print_my_cow.py
 _________________________
<span style="color:#f92672">(</span>   I udderly love you!   <span style="color:#f92672">)</span>
 -------------------------
        o   ^__^
         o  <span style="color:#f92672">(</span>oo<span style="color:#f92672">)</span><span style="color:#ae81ff">\_</span>______
            <span style="color:#f92672">(</span>__<span style="color:#f92672">)</span><span style="color:#ae81ff">\ </span>      <span style="color:#f92672">)</span><span style="color:#ae81ff">\/\
</span><span style="color:#ae81ff"></span>                <span style="color:#f92672">||</span>----w |
                <span style="color:#f92672">||</span>     <span style="color:#f92672">||</span>
</code></pre></div><p>Feel free to go crazy with this one.  (If you&rsquo;re wondering where I got this idea, have a look at the Linux package <a href="https://en.wikipedia.org/wiki/Cowsay">cowsay</a>).</p>
<hr>
<h3 id="user-supplied-input">User-supplied input</h3>
<p>Another important part of programming is accepting input from a user.  In the previous two exercises, running your scripts always produced the same output.  But what if we wanted to have the output of our program depend on an input that the user supplies?</p>
<p>For example, let&rsquo;s say I wanted to write a program that takes a number as input and prints out that number incremented by one.  Easy enough!  I could just write the following in the shell.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> my_favorite_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(my_favorite_number <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
<span style="color:#ae81ff">6</span>
</code></pre></div><p>But what happens when your favorite number changes from 5 to 941?  Well, you&rsquo;d have to write the whole thing over again.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> my_favorite_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">941</span>
<span style="color:#f92672">&gt;&gt;&gt;</span> print(my_favorite_number <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
<span style="color:#ae81ff">942</span>
</code></pre></div><p>This is a little bit cumbersome.  What we&rsquo;d really like is to be able to run a program that accepts your favorite number as input and then prints the incremented number.</p>
<p>How should we do this?  Well, hopefully you remember the tips in <a href="#when-to-use-the-shell-and-when-to-use-scripts">When to use the shell and when to use scripts</a>; specifically, one of the recommendations was to use scripts whenever you need to run a program multiple times.  So let&rsquo;s try writing a script called increment.py that solves our problem.  Here&rsquo;s the script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">my_favorite_number <span style="color:#f92672">=</span> <span style="color:#ae81ff">941</span>
print(my_favorite_number <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</code></pre></div><p>And here&rsquo;s the output it produces</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python increment.py
<span style="color:#ae81ff">942</span>
</code></pre></div><p>This is easy to rerun, but we still haven&rsquo;t resolved this issue where we can&rsquo;t change your favorite number without rewriting the code.  And now is when the magic of the <code>input</code> function comes in handy.</p>
<blockquote>
<p>The <strong>input</strong> function allows a user to input data into a program.</p>
</blockquote>
<p>Let&rsquo;s see it in action.  Try out the following script:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">my_favorite_number <span style="color:#f92672">=</span> input(<span style="color:#e6db74">&#34;Enter your favorite number: &#34;</span>)
print(int(my_favorite_number) <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>)
</code></pre></div><p>Compared to the last version of increment.py, two things have changed.  In the first line, we used the input command to ask the user to input a number.  And the second line is almost the same, but to make sure the addition works correctly, we need to convert the number you input from a string to an integer, and hence the use of the <code>int</code> function (I&rsquo;ll say more about this in the next lesson on <a href="https://arobey1.github.io/python/variables_data_types/" title="Variables">Variables, data types, and comparison</a>).  Now, when you run your program, you&rsquo;ll be able to enter your favorite number:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python increment.py 
Enter your favorite number: <span style="color:#ae81ff">1995</span>
<span style="color:#ae81ff">1996</span>
</code></pre></div><p>And there you have it!  We&rsquo;ve solved our problem.</p>
<hr>
<h4 id="exercise-3-using-the-input-function">Exercise 3 (Using the input function)</h4>
<p>The input function is a powerful friend.  It accepts all kinds of things.  In this exercise, we&rsquo;re going to stretch the limits of what the input function can do.</p>
<p>For starters, write a program called my_sum.py which accepts not one, but two inputs.  It should prompt the user for two different numbers, and then return their sum.  Here&rsquo;s the kind of output I&rsquo;m looking for:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python my_sum.py
Enter your first number: <span style="color:#ae81ff">14</span>
Enter your second number: <span style="color:#ae81ff">7</span>
<span style="color:#ae81ff">21</span>
</code></pre></div><hr>
<h4 id="exercise-4-more-practice-with-the-input-function">Exercise 4 (More practice with the input function)</h4>
<p>Next, create a Python script called just_checking_in.py.  This script is all about self-care.  I want you to ask yourself a question, and then supply the answer.  Your program should start by asking you to input a question.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python just_checking_in.py
Type a question:
</code></pre></div><p>I want to self-evaluate a little, so I&rsquo;ll ask myself how I&rsquo;m doing:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python just_checking_in.py
Type a question: How are you doing? 
</code></pre></div><p>Your program should then ask you the question you typed in.  Here&rsquo;s what it should look like end-to-end:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ python increment.py 
Type a question: How are you doing? 
How are you doing? I am finding my own happiness.
</code></pre></div><p>For a bonus point, can you write this script in one line of Python?</p>
<hr>
<h3 id="review">Review</h3>
<p>Let&rsquo;s summarize what we&rsquo;ve learned in this lesson.</p>
<ul>
<li>
<p><a href="#interacting-with-python">Interacting with Python</a>.  There are two main ways of interacting with Python: shells and scripts.</p>
<ul>
<li>
<p><a href="#python-shell">Python shell</a>.  The Python <strong>shell</strong> is an interpreter that allows you to execute Python commands one by one.</p>
</li>
<li>
<p><a href="#python-scripts">Python scripts</a>.  A Python <strong>script</strong> is a file containing Python code that can be executed from the command line.</p>
</li>
</ul>
</li>
<li>
<p><a href="#when-to-use-the-shell-and-when-to-use-scripts">When to use the shell and when to use scripts</a>.  The shell is best for executing simple Python commands.  For long and/or more complicated programs, it&rsquo;s often easier to use a script (or multiple scripts) instead of a shell.</p>
</li>
<li>
<p><a href="#print-statements">Print statements</a>.  The <strong>print</strong> function allows you to print output to the console.  This is one of the most used commands in Python.</p>
</li>
<li>
<p><a href="#exercise-1-from-the-shell-to-a-script">Exercise 1 (From the shell to a script)</a>.</p>
</li>
<li>
<p><a href="#exercise-2-your-first-python-program">Exercise 2: Your first Python program</a></p>
</li>
<li>
<p><a href="#user-supplied-input">User-supplied input</a>.  The <strong>input</strong> function allows a user to input data into a Python program.</p>
</li>
<li>
<p><a href="#exercise-3-using-the-input-function">Exercise 3 (Using the input function)</a></p>
</li>
<li>
<p><a href="#exercise-4-more-practice-with-the-input-function">Exercise 4 (More practice with the input function)</a></p>
</li>
</ul>
<hr>
<p>Great work!  you made it through the first lesson.  Next up is a lesson about Python <a href="https://arobey1.github.io/python/variables_data_types/" title="Variables">Variables, data types, and comparison</a>.  Looking forward to seeing you there!</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Python</title>
            <link>https://arobey1.github.io/python/intro/</link>
            <pubDate>Sat, 17 Dec 2022 00:00:00 +0000</pubDate>
            
            <guid>https://arobey1.github.io/python/intro/</guid>
            <description>Psst! Hey you. Yes you! You look like you&amp;rsquo;re ready to learn Python. And yes, you&amp;rsquo;re right, I can&amp;rsquo;t see you. But I know you wouldn&amp;rsquo;t be here if you weren&amp;rsquo;t ready to go. So let&amp;rsquo;s do this!
 What is Python? Python is a programming language that has become ubiquitous in fields such as data science and machine learning. The syntax is relatively simple, and with the right guidance, it&amp;rsquo;s easy to get started!</description>
            <content type="html"><![CDATA[<p>Psst!  Hey you.  Yes you!  You look like you&rsquo;re ready to learn Python.  And yes, you&rsquo;re right, I can&rsquo;t see you.  But I know you wouldn&rsquo;t be here if you weren&rsquo;t ready to go.  So let&rsquo;s do this!</p>
<hr>
<p><strong>What is Python?</strong> Python is a programming language that has become ubiquitous in fields such as data science and machine learning.  The syntax is relatively simple, and with the right guidance, it&rsquo;s easy to get started!</p>
<!-- raw HTML omitted -->
<hr>
<p><strong>My philosophy.</strong>  I don&rsquo;t know about you, but I <em>despise</em> it when so-called &ldquo;introductory&rdquo; books are long, technical, and filled with jargon, minutiae, and unlikely edge cases.  You&rsquo;ll find that many of the Python books and resources out there are written to leave no one in any doubt that the author is an expert on the topic.  This is frustrating, because when it comes to Python, the basics are accessible to almost anyone who has worked with computers before.  And so in this set of notes, you&rsquo;re going to see no more or less than you need to know to get started.</p>
<p>Without further adieu, let&rsquo;s get right into it.</p>
<hr>
<p><strong>Getting started.</strong>  In this set of notes, we&rsquo;re going to cover the following topics.</p>
<ol>
<li><a href="https://arobey1.github.io/python/interacting_with_python/" title="Interacting with Python">Interacting with Python</a></li>
<li><a href="https://arobey1.github.io/python/variables_data_types/" title="Variables">Variables, data types, and comparison</a></li>
<li><a href="https://arobey1.github.io/python/math_operations/" title="Math Operations">Mathematical operations</a></li>
</ol>
<p>(More lessons are on the way!)</p>
<hr>
<p>Once you&rsquo;ve studied these lessons, you&rsquo;ll be well on your way toward creating your own Python projects.  Along the way, there will be plenty of exercises &ndash; both easy and challenging &ndash; which will help to solidify your understanding.</p>
]]></content>
        </item>
        
    </channel>
</rss>
